<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Backendology </title>
    <link>https://backendology.com/</link>
    <language>en-us</language>
    <author>Jared Ririe</author>
    <rights>(C) 2018</rights>
    <updated>2018-07-01 00:00:00 &#43;0000 UTC</updated>

    
      
    
      
    
      
    
      
        <item>
          <title>Amazon Alexa Skill using a Go AWS Lambda Function</title>
          <link>https://backendology.com/2018/10/27/alexa-skill-lambda-golang/</link>
          <pubDate>Sat, 27 Oct 2018 00:00:00 UTC</pubDate>
          <author>Jared Ririe</author>
          <guid>https://backendology.com/2018/10/27/alexa-skill-lambda-golang/</guid>
          <description>

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/alexa-logo.png&#34; width=&#34;100%&#34; alt=&#34;Alexa logo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Amazon is currently &lt;a href=&#34;https://www.digitaltrends.com/home/amazon-alexa-skill-promotion-for-free-dot/&#34;&gt;running a promotion&lt;/a&gt; in which developers who publish a new skill to the Alexa Skills Store receive the new Echo Dot. While I do not own any Amazon devices, I decided to participate to get an interesting product, learn more about developing voice-based applications, and write my first AWS Lambda function in Go.&lt;/p&gt;

&lt;p&gt;Before I dive into the implementation, I think Amazon deserves some praise for this promotion. It&amp;rsquo;s a win-win that more companies could learn from. Getting to the point of publishing a skill requires participants to go through the entire development process:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Set up an Amazon Developer and Amazon Web Services accounts&lt;/li&gt;
&lt;li&gt;Learn Alexa terminology like invocations and intents&lt;/li&gt;
&lt;li&gt;Configure the skill in the Alexa Developer Console&lt;/li&gt;
&lt;li&gt;Write an AWS Lambda function that understands how to parse Alexa&amp;rsquo;s requests and generate valid responses&lt;/li&gt;
&lt;li&gt;Submit the skill for review (with a customer-ready description and icon)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With a little incentive, Amazon surely received an impressive number of novel skills submitted to their store because of this promotion, making their product better and more comprehensive. Amazon is also managing to get at least a few hours of work for the cost it takes them to make an Echo Dot. Meanwhile, developers get an interesting side project, diverse development experience, and a consumer product that can run the skills they write. Very cool!&lt;/p&gt;

&lt;h2 id=&#34;alexa-skill-apple-guide&#34;&gt;Alexa skill: Apple Guide&lt;/h2&gt;

&lt;p&gt;The simple skill I wrote for the purpose of the promotion is called &lt;strong&gt;Apple Guide (Unofficial)&lt;/strong&gt;. It offers a convenient way to check whether it&amp;rsquo;s a good time to buy a new Apple product. Through a real-time look at the &lt;a href=&#34;https://buyersguide.macrumors.com/&#34;&gt;MacRumors Buyer&amp;rsquo;s Guide&lt;/a&gt;, this skill allows Alexa to tell you which of four states an Apple product is in: {updated, neutral, caution, and outdated}. A product in the &lt;em&gt;caution&lt;/em&gt; state, for example, has not been updated for quite some time, so it may be wise to be patient and wait for a new update. The status &lt;em&gt;updated&lt;/em&gt;, on the other hand, means that the Apple product was just updated and you&amp;rsquo;re safe to go ahead with the purchase.&lt;/p&gt;

&lt;p&gt;To create my skill, I followed two tutorials. The first, &lt;a href=&#34;https://medium.com/crowdbotics/how-to-build-a-custom-amazon-alexa-skill-step-by-step-my-favorite-chess-player-dcc0edae53fb&#34;&gt;&amp;ldquo;How To Build A Custom Amazon Alexa Skill, Step-By-Step: My Favorite Chess Player&amp;rdquo;&lt;/a&gt;, shows you how how to create a skill from beginning to end. I highly recommend following this kind of tutorial to get a skill working as it&amp;rsquo;s crucial to have a high-level overview to know what all the steps you&amp;rsquo;ll need to take, what configuration is possible, etc.&lt;/p&gt;

&lt;p&gt;The first tutorial gives a great high-level overview, but the AWS Lambda function is written in Python and is not explained in much detail. As I wanted to write my Lambda function in Go, I supplemented with this second tutorial, &lt;a href=&#34;https://medium.com/@amalec/alexa-skills-with-go-54db0c21e758&#34;&gt;&amp;ldquo;Alexa Skills with Go&amp;rdquo;&lt;/a&gt; which covers the following topics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Automating deployment of Go-based AWS Lambda functions&lt;/li&gt;
&lt;li&gt;Handling a variety of Alexa Skill request attributes&lt;/li&gt;
&lt;li&gt;Creating and returning Alexa Skill responses&lt;/li&gt;
&lt;li&gt;Deploying code to AWS Lambda without manually zipping the binary created by Go&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;configuring-the-alexa-skill-interface&#34;&gt;Configuring the Alexa skill interface&lt;/h2&gt;

&lt;p&gt;An Alexa skill is not entirely written in code. Configuration, tests, and distribution are done in the &lt;a href=&#34;https://developer.amazon.com/alexa/console/ask&#34;&gt;Alexa Developer Console&lt;/a&gt;. The console is where you create the &lt;strong&gt;skill interface&lt;/strong&gt; whereas the code is where you create the &lt;strong&gt;skill service&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The Alexa skill consists of two main components: the skill interface and the skill service.&lt;/p&gt;

&lt;p&gt;The skill interface processes the user’s speech requests and then maps them to intents within the interaction model.&lt;/p&gt;

&lt;p&gt;The skill service determines what actions to take in response to the JSON encoded event received from the skill interface. Upon reaching a decision the skill service returns a JSON encoded response to the skill interface for further processing. After processing, the speech response is sent back to the user through the Echo.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;invocation&#34;&gt;Invocation&lt;/h3&gt;

&lt;p&gt;The invocation name is the phrase users speak to trigger a particular skill. Keeping it simple and understandable by Alexa is critical&amp;ndash;a skill that&amp;rsquo;s hard to launch will never be used.&lt;/p&gt;

&lt;p&gt;My initial invocation name was &amp;ldquo;Apple Buyer&amp;rsquo;s Guide&amp;rdquo; and turned out to have two major problems. First, it refers to the brand Apple too directly, implying this was an official skill or sponsored by Apple. Second, &amp;ldquo;Buyer&amp;rsquo;s&amp;rdquo; proved difficult for Alexa to understand which led to a frustrating experience interacting with the skill. &amp;ldquo;Unoffical Apple Guide&amp;rdquo; resolved both of these problems.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not particularly fond of having &amp;ldquo;unofficial&amp;rdquo; in the title and invocation name, but Amazon&amp;rsquo;s brand policy proved to be very strict. I ventured &amp;ldquo;Picking Apples&amp;rdquo; though that was also rejected.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.amazon.com/docs/custom-skills/understanding-how-users-invoke-custom-skills.html&#34;&gt;Here&lt;/a&gt; is Amazon&amp;rsquo;s documentation on invocation.&lt;/p&gt;

&lt;h3 id=&#34;intents&#34;&gt;Intents&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/alexa-skill-intents.png&#34; width=&#34;100%&#34; alt=&#34;Alexa skill intents&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Intents capture what the user &lt;em&gt;intends&lt;/em&gt; to do, such as ask for help, interact with the skill, or exit the skill. Amazon takes care of the defaults (help, cancel, etc.) but requires configuration for the unique aspects of your skill.&lt;/p&gt;

&lt;p&gt;In my case, I needed to define an intent to ask for a product recommendation. Each intent has at least one utterance (word or phrase) the user speaks to invoke the intent. My utterances included:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;should I buy the {product}&lt;/li&gt;
&lt;li&gt;is now a good time to buy the {product}&lt;/li&gt;
&lt;li&gt;Apple {product}&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Where &lt;code&gt;{product}&lt;/code&gt; is a defined slot for the part of the phrase that is variable. In the skill service, I extract the contents of this slot to know which product the user is asking about:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;product&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Intent&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Slots&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;product&amp;#34;&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;Value&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;endpoint&#34;&gt;Endpoint&lt;/h3&gt;

&lt;p&gt;The endpoint is where you define the web location of the skill service. There are two options: an AWS Lambda function or an HTTPS service. I chose to write a Lambda function.&lt;/p&gt;

&lt;h2 id=&#34;writing-the-aws-lambda-function-the-skill-service&#34;&gt;Writing the AWS Lambda Function (the skill service)&lt;/h2&gt;

&lt;h3 id=&#34;aws-lambda&#34;&gt;AWS Lambda&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/alexa-skill-aws-lambda.png&#34; width=&#34;100%&#34; alt=&#34;AWS Lambda&#34; /&gt;&lt;/p&gt;

&lt;p&gt;AWS Lambda is part of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Serverless_computing&#34;&gt;serverless computing movement&lt;/a&gt; which abstracts things like server management and allocation away from developers of event handling code. Rather than standing up a server and running an always-listening web application, you simply write some code (the &amp;ldquo;lambda function&amp;rdquo;) which runs in response to an event. The code ends up running on some AWS server, just not a server that you manage directly.&lt;/p&gt;

&lt;p&gt;Implementing a Lambda function in Go is straightforward. Write a main function that calls &lt;code&gt;lambda.Start(handler)&lt;/code&gt; where &lt;code&gt;handler&lt;/code&gt; is the name of a function that matches one of &lt;a href=&#34;https://github.com/aws/aws-lambda-go/blob/master/lambda/entry.go#L27-L35&#34;&gt;several signatures&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;lambda&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Start&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In my case, the handler accepts an Alexa request and returns an Alexa response.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;alexa&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;alexa&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once you&amp;rsquo;ve written your handler, you simply compile a Linux binary, zip it, and upload it to the Lambda Management Console. Set the Runtime to &lt;code&gt;Go 1.x&lt;/code&gt; and Handler to the name of the binary in the zip file. I wrote a quick bash script to automate creating and zipping the binary:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;set -x

rm -rf alexa-apple-guide.zip
GOOS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;linux go build -o alexa-apple-guide -a -ldflags &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-w -s -extldflags \&amp;#34;-static\&amp;#34;&amp;#34;&lt;/span&gt; -installsuffix cgo
zip -r alexa-apple-guide.zip alexa-apple-guide&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The article I mentioned earlier, &lt;a href=&#34;https://medium.com/@amalec/alexa-skills-with-go-54db0c21e758&#34;&gt;&amp;ldquo;Alexa Skills with Go&amp;rdquo;&lt;/a&gt;, takes this further by automating the step to upload the zip file to AWS.&lt;/p&gt;

&lt;h3 id=&#34;lambda-handler&#34;&gt;Lambda handler&lt;/h3&gt;

&lt;p&gt;My handler inspects the Alexa request type and responds accordingly. The request could either be launching the skill, providing some intent, or closing the session.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;alexa&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;alexa&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;error&lt;/span&gt;) {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;alexa&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Type&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;alexa&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;LaunchRequestType&lt;/span&gt;:
        &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;alexa&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewResponse&lt;/span&gt;(
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Apple Guide (Unofficial)&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Welcome to the Unofficial Apple Guide. You can ask me whether it&amp;#39;s a good time to buy a particular Apple product. For example, you could ask &amp;#39;is now a good time to buy the iMac?&amp;#39;&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
        )
    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;alexa&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;IntentRequestType&lt;/span&gt;:
        &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;dispatchIntents&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;alexa&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;SessionEndedRequestType&lt;/span&gt;:
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If it&amp;rsquo;s an intent request, I need to inspect the body to know what the user is intending to do, such as ask for help (&lt;code&gt;alexa.HelpIntent&lt;/code&gt;) or ask for a product recommendation (&lt;code&gt;&amp;quot;productRecommendation&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dispatchIntents&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;alexa&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;alexa&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;alexa&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Intent&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Name&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;productRecommendation&amp;#34;&lt;/span&gt;:
        &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;handleRecommendation&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;alexa&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HelpIntent&lt;/span&gt;:
        &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;handleHelp&lt;/span&gt;()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;alexa&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;CancelIntent&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;alexa&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NoIntent&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;alexa&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;StopIntent&lt;/span&gt;:
        &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;handleStop&lt;/span&gt;()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;alexa&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;FallbackIntent&lt;/span&gt;:
        &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;handleFallback&lt;/span&gt;()
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Providing product recommendations is the core of my Alexa skill. First, I extract the product name from the &amp;ldquo;product&amp;rdquo; intent slot. With that value, I can look up the status of that product by scraping &lt;a href=&#34;https://buyersguide.macrumors.com/&#34;&gt;MacRumors Buyers Guide&lt;/a&gt;. Given the status, I can construct an Alexa response with my recommendation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;handleRecommendation&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;alexa&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;alexa&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Response&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;product&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Intent&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Slots&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;product&amp;#34;&lt;/span&gt;].&lt;span style=&#34;color:#a6e22e&#34;&gt;Value&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;// get status of product ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;status&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scraper&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Status&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Updated&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;alexa&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewResponse&lt;/span&gt;(
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Just updated!&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Sprintf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Now is a great time to buy the %s! It was recently updated.&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;product&lt;/span&gt;),
            &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;,
        )

    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scraper&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Status&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Neutral&lt;/span&gt;:
       &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scraper&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Status&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Caution&lt;/span&gt;:
        &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scraper&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Status&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Outdated&lt;/span&gt;:
        &lt;span style=&#34;color:#75715e&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;scraper&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Status&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Unknown&lt;/span&gt;:
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;unknownProductResponse&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can find the complete implementation in &lt;a href=&#34;https://github.com/jaredririe/alexa-apple-guide&#34;&gt;this GitHub repo&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;demonstration&#34;&gt;Demonstration&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/alexa-skill-demonstration.png&#34; width=&#34;100%&#34; alt=&#34;Alexa Skill demonstration&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Testing in the Alexa Developer Console is convenient. It simulates the experience of using a device with Alexa. Messages to Alexa can be spoken or typed. The following is a standard interaction where the user launches the skill, hears some instruction, and asks a question:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/alexa-skill-launch.png&#34; width=&#34;100%&#34; alt=&#34;Standard Alexa interaction&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The user can also ask for help:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/alexa-skill-help.png&#34; width=&#34;100%&#34; alt=&#34;Help Alexa interaction&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Once a user is more familiar with a skill, it&amp;rsquo;s useful to combine launching a skill and asking a question:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/alexa-skill-direct.png&#34; width=&#34;100%&#34; alt=&#34;Direct Alexa interaction&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The exact language used is not critical. Alexa distills what you say down to the invocation name and intent. For example, I can alter the above statement and still trigger the skill correctly:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/alexa-skill-direct-2.png&#34; width=&#34;100%&#34; alt=&#34;Direct Alexa interaction 2&#34; /&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;https://medium.com/crowdbotics/how-to-build-a-custom-amazon-alexa-skill-step-by-step-my-favorite-chess-player-dcc0edae53fb&#34;&gt;https://medium.com/crowdbotics/how-to-build-a-custom-amazon-alexa-skill-step-by-step-my-favorite-chess-player-dcc0edae53fb&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Building Blocks of Distributed Systems</title>
          <link>https://backendology.com/2018/10/08/distributed-systems-building-blocks/</link>
          <pubDate>Mon, 08 Oct 2018 00:00:00 UTC</pubDate>
          <author>Jared Ririe</author>
          <guid>https://backendology.com/2018/10/08/distributed-systems-building-blocks/</guid>
          <description>

&lt;p&gt;This blog post is based a chapter from &lt;a href=&#34;http://www.aosabook.org/en/index.html&#34;&gt;&lt;em&gt;The Architecture of Open Source Applications&lt;/em&gt;&lt;/a&gt; titled &amp;ldquo;&lt;a href=&#34;http://www.aosabook.org/en/distsys.html&#34;&gt;Scalable Web Architecture and Distributed Systems&lt;/a&gt;.&amp;rdquo;&lt;/p&gt;

&lt;h2 id=&#34;the-architecture-of-open-source-applications&#34;&gt;&lt;em&gt;The Architecture of Open Source Applications&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/building-blocks-architecture-open-source.png&#34; width=&#34;100%&#34; alt=&#34;The Architecture of Open Source Applications cover&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Before getting into the details of the chapter, the book itself deserves some introduction. Its opening pages make the compelling point that architects in the traditional sense are exposed to and study thousands of real buildings, but software architects rarely make a similar investment, leading to repeated mistakes:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Architects look at thousands of buildings during their training, and study critiques of those buildings written by masters. In contrast, most software developers only ever get to know a handful of large programs well—usually programs they wrote themselves—and never study the great programs of history. As a result, they repeat one another&amp;rsquo;s mistakes rather than building on one another&amp;rsquo;s successes.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Each chapter is written by experienced software developers who impart knowledge of a particular system or design. Some other chapters include &lt;a href=&#34;http://www.aosabook.org/en/nginx.html&#34;&gt;nginx&lt;/a&gt;, &lt;a href=&#34;http://www.aosabook.org/en/ffreleng.html&#34;&gt;Firefox Release Engineering&lt;/a&gt;, and &lt;a href=&#34;http://www.aosabook.org/en/git.html&#34;&gt;Git&lt;/a&gt;. The chapter covered in this post primarily uses an image hosting application to explain the principles and building blocks of scalable distributed systems.&lt;/p&gt;

&lt;h2 id=&#34;building-blocks&#34;&gt;Building blocks&lt;/h2&gt;

&lt;p&gt;After explaining the general principles, the author asserts that the most challenging aspect of building web distributed systems is scaling access to the data. While application servers are designed to be stateless and embody a &lt;a href=&#34;https://en.wikipedia.org/wiki/Shared-nothing_architecture&#34;&gt;shared-nothing architecture&lt;/a&gt;, &amp;ldquo;the heavy lifting is pushed down the stack to the database server and supporting services.&amp;rdquo; The data access layer is &amp;ldquo;where the real scaling and performance challenges come into play.&amp;rdquo;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Caches, proxies, indexes, load balancers, and queues are the building blocks of a scalable data access layer. Rather than covering the entire chapter, I will focus the remainder of this post on these building blocks.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#caches&#34;&gt;Caches&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#proxies&#34;&gt;Proxies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#indexes&#34;&gt;Indexes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#load-balancers&#34;&gt;Load Balancers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#queues&#34;&gt;Queues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;caches&#34;&gt;Caches&lt;/h3&gt;

&lt;p&gt;Caches are ubiquitous in computing. Their ability to scale read access in a system is clear. They &amp;ldquo;take advantage of the locality of reference principle: recently requested data is likely to be requested again.&amp;rdquo;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;In a &lt;a href=&#34;https://backendology.com/2018/08/27/multiple-layers-caching/&#34;&gt;previous blog post&lt;/a&gt;, I wrote at length about the importance of having multiple layers of caching, including client-side caching. The author of this chapter reached a similar conclusion:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Caches can exist at all levels in architecture, but are often found at the level nearest to the front end, where they are implemented to return data quickly without taxing downstream levels.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When clients avoid &amp;ldquo;taxing downstream levels&amp;rdquo;, they enable more growth in the system without the need to scale out. For example, assuming linear scaling and equally taxing requests, if clients implement caching that reduces their usage of the backend by 50%, then the backend can handle twice as many clients without purchasing more resources.&lt;/p&gt;

&lt;p&gt;The chapter&amp;rsquo;s coverage of caching augments my previous post with a helpful discussion of cache placement.&lt;/p&gt;

&lt;h4 id=&#34;cache-placement&#34;&gt;Cache placement&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Request Node&lt;/em&gt;: collocate the cache with the node that requests the data

&lt;ul&gt;
&lt;li&gt;Pros

&lt;ul&gt;
&lt;li&gt;Each time a request is made, the node can quickly return cached data if it exists, avoiding any network hops&lt;/li&gt;
&lt;li&gt;Often in-memory and very fast&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Cons

&lt;ul&gt;
&lt;li&gt;When you have multiple request nodes that are load balanced, you may have to cache the same item on all the nodes&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/building-blocks-request-cache.png&#34; width=&#34;100%&#34; alt=&#34;Request Node Cache&#34; /&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Global Cache&lt;/em&gt;: central cache used by all request nodes

&lt;ul&gt;
&lt;li&gt;Pros

&lt;ul&gt;
&lt;li&gt;A given item will only be cached only once&lt;/li&gt;
&lt;li&gt;Multiple requests for an item can be &lt;em&gt;collapsed&lt;/em&gt; into one request to the backend&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Cons

&lt;ul&gt;
&lt;li&gt;Easy to overwhelm a single cache as the number of clients and requests increase&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Types

&lt;ul&gt;
&lt;li&gt;Reverse proxy cache: cache is responsible for retrieval on cache miss (more common, handles its own eviction)&lt;/li&gt;
&lt;li&gt;Cache as a service: request nodes are responsible for retrieval on cache miss (typically used when the request nodes understand the eviction strategy or hot spots better than the cache)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/building-blocks-reverse-proxy-cache.png&#34; width=&#34;100%&#34; alt=&#34;Reverse Proxy Cache&#34; /&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Distributed Cache&lt;/em&gt;: each of the nodes that make up the cache own part of the cached data; divided using a &lt;a href=&#34;https://en.wikipedia.org/wiki/Consistent_hashing&#34;&gt;consistent hashing function&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Pros

&lt;ul&gt;
&lt;li&gt;Cache space and load capacity can be increased by scaling out (increasing the number of nodes)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Cons

&lt;ul&gt;
&lt;li&gt;Node failure must be handled or intentionally ignored&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;proxies&#34;&gt;Proxies&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;At a basic level, a proxy server is an intermediate piece of hardware/software that receives requests from clients and relays them to the backend origin servers. Typically, proxies are used to filter requests, log requests, or sometimes transform requests (by adding/removing headers, encrypting/decrypting, or compression).&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Proxies are a deceptively simple building block in an architecture: their very nature is to be lightweight, nearly invisible components yet they can provide incredible value to a system by reducing load on the backend servers, providing a convenient location for caching layers, and funneling traffic appropriately.&lt;/p&gt;

&lt;h4 id=&#34;collapsed-forwarding&#34;&gt;Collapsed forwarding&lt;/h4&gt;

&lt;p&gt;Collapsed forwarding is an example of a technique that proxies can employ to decrease load on a downstream server. In this technique, similar requests are &lt;em&gt;collapsed&lt;/em&gt; into a single request that is made to the downstream server; the result of this request is then written to all similar requests, thus reducing the number of requests made.&lt;/p&gt;

&lt;p&gt;A simple example of collapsed forwarding is &lt;strong&gt;deduplication&lt;/strong&gt;. If a resource X is requested 100 times, the proxy can make a single request to retrieve X from the downstream server and then write the same response body to the other 99 requests for X.&lt;/p&gt;

&lt;p&gt;This is particularly helpful for the downstream server when resource X is large in size. Let&amp;rsquo;s assume a 5 MB payload that must be read into memory (rather than streamed). Without deduplication, the hundred requests would require the server to wastefully read 5 * 99 = 495 MB into memory. The deduplication step in the proxy can smooth over spikes and reduce the memory usage dramatically.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s implement a simple proxy and server in Go with collapsed forwarding!&lt;/p&gt;

&lt;p&gt;Our implementation of collapsed forwarding will batch together requests for the same URL. Every five seconds, our &lt;code&gt;requestBatcher&lt;/code&gt; will flush its batches of requests by handling one request from each batch and giving the same result to the rest of the requests in that batch.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;requestBatcher&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;batch&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;][]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HandlerFunc&lt;/span&gt;

    &lt;span style=&#34;color:#a6e22e&#34;&gt;mu&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sync&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Mutex&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;{}
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;{}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;requestBatcher&lt;/code&gt; will store the batches of requests as a map from string (URL) to a slice of requests. The &lt;code&gt;handler&lt;/code&gt; will indicate how the requests should be handled. We&amp;rsquo;ll protect our map with a mutex &lt;code&gt;mu&lt;/code&gt; and have a &lt;code&gt;close&lt;/code&gt; channel for a clean shutdown.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;request&lt;/code&gt; is everything we need to process the request, the original request &lt;code&gt;r&lt;/code&gt; and the writer &lt;code&gt;w&lt;/code&gt; for writing the response. We&amp;rsquo;ll also have a &lt;code&gt;done&lt;/code&gt; channel that will allow the flush step to tell the goroutine handling the request that the request has been handled.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newRequestBatcher&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HandlerFunc&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;requestBatcher&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;rc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;requestBatcher&lt;/span&gt;{
        &lt;span style=&#34;color:#a6e22e&#34;&gt;batch&lt;/span&gt;:   make(&lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;][]&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;),
        &lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;mu&lt;/span&gt;:      &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;sync&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Mutex&lt;/span&gt;{},
        &lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;:   make(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;{}),
    }

    &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; {
            &lt;span style=&#34;color:#a6e22e&#34;&gt;ticker&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewTicker&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Second&lt;/span&gt;)
            &lt;span style=&#34;color:#66d9ef&#34;&gt;select&lt;/span&gt; {
            &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ticker&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;C&lt;/span&gt;:
                &lt;span style=&#34;color:#a6e22e&#34;&gt;rc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Flush&lt;/span&gt;()
            &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;rc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;close&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
            }
        }
    }()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rc&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The constructor for the &lt;code&gt;requestBatcher&lt;/code&gt; will initialize all the variables and kick off a goroutine that calls &lt;code&gt;Flush&lt;/code&gt; every five seconds. For a real production proxy, five seconds is likely far too long. It will give us enough time to see that our batching logic is working, however.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;rc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;requestBatcher&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Append&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;rc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;mu&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Lock&lt;/span&gt;()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;mu&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Unlock&lt;/span&gt;()

    &lt;span style=&#34;color:#a6e22e&#34;&gt;rc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;batch&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;] = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;rc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;batch&lt;/span&gt;[&lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;], &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Append&lt;/code&gt; appends the given request to the slice of requests under the given key.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;rc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;requestBatcher&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Flush&lt;/span&gt;() {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;rc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;mu&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Lock&lt;/span&gt;()
    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;mu&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Unlock&lt;/span&gt;()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;batch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;batch&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%d batched requests under key %q\n&amp;#34;&lt;/span&gt;,
            len(&lt;span style=&#34;color:#a6e22e&#34;&gt;batch&lt;/span&gt;), &lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;)

        &lt;span style=&#34;color:#75715e&#34;&gt;// handle one candidate request
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;candidateRequest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;batch&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]

        &lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;httptest&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewRecorder&lt;/span&gt;()
        &lt;span style=&#34;color:#a6e22e&#34;&gt;rc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;handler&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ServeHTTP&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;candidateRequest&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;)
        &lt;span style=&#34;color:#a6e22e&#34;&gt;responseBody&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Bytes&lt;/span&gt;()

        &lt;span style=&#34;color:#75715e&#34;&gt;// write the same result to all requests in this batch
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;batch&lt;/span&gt; {
            &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Close&lt;/span&gt;()
            &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WriteHeader&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Result&lt;/span&gt;().&lt;span style=&#34;color:#a6e22e&#34;&gt;StatusCode&lt;/span&gt;)
            &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Write&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;responseBody&lt;/span&gt;)

            &lt;span style=&#34;color:#75715e&#34;&gt;// let the goroutine for this request know that
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;// it has been handled
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;{}{}
        }

        &lt;span style=&#34;color:#75715e&#34;&gt;// delete the batch
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        delete(&lt;span style=&#34;color:#a6e22e&#34;&gt;rc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;batch&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;)
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Flush&lt;/code&gt; handles one request from each batch of requests and writes the same result to all requests in the batch. Finally, it deletes the batch of requests so we can start fresh after each flush.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;rc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newRequestBatcher&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;proxyRequest&lt;/span&gt;)
    &lt;span style=&#34;color:#a6e22e&#34;&gt;proxy&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newProxy&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rc&lt;/span&gt;)
    &lt;span style=&#34;color:#a6e22e&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newServer&lt;/span&gt;()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;proxy&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Close&lt;/span&gt;()  &lt;span style=&#34;color:#75715e&#34;&gt;// stop accepting new requests at the proxy layer
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;rc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Close&lt;/span&gt;()     &lt;span style=&#34;color:#75715e&#34;&gt;// close and flush out any pending requests
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;server&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Close&lt;/span&gt;() &lt;span style=&#34;color:#75715e&#34;&gt;// stop the server
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    }()

    &lt;span style=&#34;color:#75715e&#34;&gt;// run until interrupted
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;stop&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Signal&lt;/span&gt;)
    &lt;span style=&#34;color:#a6e22e&#34;&gt;signal&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Notify&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;stop&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Interrupt&lt;/span&gt;)
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;stop&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newProxy&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;rc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;requestBatcher&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;proxy&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt;{
        &lt;span style=&#34;color:#a6e22e&#34;&gt;Addr&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:8080&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HandlerFunc&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;) {
            &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[proxy]&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;URL&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;())

            &lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;{})
            &lt;span style=&#34;color:#a6e22e&#34;&gt;rc&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Append&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;URL&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(), &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;{
                &lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;:    &lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;,
                &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;:    &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;,
                &lt;span style=&#34;color:#a6e22e&#34;&gt;done&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt;,
            })

            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt;
        }),
    }

    &lt;span style=&#34;color:#75715e&#34;&gt;// start the proxy
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[proxy] running on port&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;proxy&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Addr&lt;/span&gt;)
        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;proxy&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ListenAndServe&lt;/span&gt;())
    }()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;proxy&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;newServer&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;server&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Server&lt;/span&gt;{
        &lt;span style=&#34;color:#a6e22e&#34;&gt;Addr&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;:8081&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;Handler&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;HandlerFunc&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;) {
            &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[server]&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;URL&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;())
            &lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Write&lt;/span&gt;([]byte(&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;URL&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;()))
        }),
    }

    &lt;span style=&#34;color:#75715e&#34;&gt;// start the server
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;go&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt;() {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[server] running on port&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;server&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Addr&lt;/span&gt;)
        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;server&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ListenAndServe&lt;/span&gt;())
    }()

    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;server&lt;/span&gt;
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;proxyRequest&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ResponseWriter&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;url&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;URL&lt;/span&gt;{
        &lt;span style=&#34;color:#a6e22e&#34;&gt;Scheme&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;Host&lt;/span&gt;:   &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;localhost:8081&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#a6e22e&#34;&gt;Path&lt;/span&gt;:   &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;URL&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Path&lt;/span&gt;,
    }

    &lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;NewRequest&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Method&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;u&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;String&lt;/span&gt;(), &lt;span style=&#34;color:#a6e22e&#34;&gt;r&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
    }

    &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;DefaultClient&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Do&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;request&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
    }

    &lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ioutil&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;ReadAll&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;)
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;nil&lt;/span&gt; {
        &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt;)
        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt;
    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Close&lt;/span&gt;()

    &lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;WriteHeader&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;response&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;StatusCode&lt;/span&gt;)
    &lt;span style=&#34;color:#a6e22e&#34;&gt;w&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Write&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;bytes&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our main function does the work of creating a new &lt;code&gt;requestBatcher&lt;/code&gt;, standing up our simple proxy and server, and waiting for an interrupt.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The proxy runs on &lt;code&gt;localhost:8080&lt;/code&gt; and will handle requests by Appending them to the batch of requests and waiting on the &lt;code&gt;done&lt;/code&gt; channel for completion. If we didn&amp;rsquo;t wait for this channel, the request&amp;rsquo;s goroutine would exit and leave the response unwritten.&lt;/li&gt;
&lt;li&gt;The server runs on &lt;code&gt;localhost:8081&lt;/code&gt;. It&amp;rsquo;s pretty straightforward: it handles requests by writing the response to be the URL of the request, like an echo server.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;proxyRequest&lt;/code&gt; is the handler that we pass to &lt;code&gt;newRequestBatcher&lt;/code&gt;. It tells the batcher what it should do with requests when flushing them. In this case, we&amp;rsquo;re indicating that requests should be made to the server at &lt;code&gt;localhost:8081&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The entirety of this code is &lt;a href=&#34;https://github.com/jaredririe/backendology/tree/master/code/collapsed-forwarding&#34;&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If we make several requests to the proxy in the background, like so:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ curl localhost:8080/test &amp;amp;
$ curl localhost:8080/test &amp;amp;
$ curl localhost:8080/test2 &amp;amp;
$ curl localhost:8080/test &amp;amp;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The application logs each request, finds two sets of batched requests, and makes a single request to the server for each batch:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;proxy&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; /test
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;proxy&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; /test
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;proxy&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; /test2
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;proxy&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; /test
&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; batched requests under key &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/test&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;server&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; /test
&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; batched requests under key &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/test2&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt;server&lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt; /test2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;reverse-proxy-cache&#34;&gt;Reverse proxy cache&lt;/h4&gt;

&lt;p&gt;A reverse proxy cache, as the name implies, is the combination of a proxy and cache. Requests are made to a proxy in front of an &lt;strong&gt;origin server&lt;/strong&gt; which performs best-effort caching. It always reserves the right to fall back on the origin for a definitive response, which is a convenient property that makes failure scenarios relatively straightforward.&lt;/p&gt;

&lt;p&gt;A less straightforward problem is handling cache eviction. Let&amp;rsquo;s consider a few options:&lt;/p&gt;

&lt;h5 id=&#34;automatic-expiration-after-a-ttl&#34;&gt;Automatic expiration after a TTL&lt;/h5&gt;

&lt;p&gt;This option works well with in-memory caches that are intended to protect against spikes of requests. The data isn&amp;rsquo;t cached very long, so its usefulness can be limited, however.&lt;/p&gt;

&lt;h5 id=&#34;intercept-modifications-and-handle-evictions&#34;&gt;Intercept modifications and handle evictions&lt;/h5&gt;

&lt;p&gt;If all modifications to the underlying data go through the proxy layer, the cached data can be evicted as needed.&lt;/p&gt;

&lt;h5 id=&#34;only-cache-immutable-data&#34;&gt;Only cache immutable data&lt;/h5&gt;

&lt;p&gt;In cases where modifications cannot be intercepted or the cached data is a computed result, more advanced techniques must be used. One such technique is to only cache unchanging, immutable data that never becomes stale or needs eviction. While this may seem impractical, it&amp;rsquo;s usually not.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say that you want to cache the result of running a query against some data. If you run the query today, you get five rows of data back. If you run it tomorrow, you get seven because new data arrived. The query result is therefore &lt;strong&gt;mutable&lt;/strong&gt;. How can we make it immutable? What we&amp;rsquo;ll do is store the data under a cache key computed like so:&lt;code&gt;hash(resource identifier, hash(query string), timestamp)&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;resource identifier&lt;/strong&gt;: the ID that references the data, like a customerId or datasetId within a customer&amp;rsquo;s account&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;query string&lt;/strong&gt;: the string that identifies the query, perhaps provided as a query parameter in the request&amp;rsquo;s URL or a JSON representation in the request&amp;rsquo;s body&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;timestamp&lt;/strong&gt;: the last updated time of the data stored under the resource identifier&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Assuming the table like the following, if we make a query for all data stored under A, we&amp;rsquo;ll cache the response (&lt;code&gt;[1, 2, 3]&lt;/code&gt;) under the cache key &lt;code&gt;hash(A, hash(query string), 1539322037479)&lt;/code&gt;. Then subsequent requests will only be cache hits if the data has not changed.&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ID&lt;/th&gt;
&lt;th&gt;LastUpdated&lt;/th&gt;
&lt;th&gt;Data&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;1539322037479&lt;/td&gt;
&lt;td&gt;[1, 2, 3]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;1538431688314&lt;/td&gt;
&lt;td&gt;[8, 2, 3, 1]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;1537899135166&lt;/td&gt;
&lt;td&gt;[1, 10, 1]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;D&lt;/td&gt;
&lt;td&gt;1538116563215&lt;/td&gt;
&lt;td&gt;[10, 9, 8, 7]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Using this technique works best when the consumer provides a &lt;code&gt;LastUpdated&lt;/code&gt; value as part of their request. Preferably they retrieved this value once and use it across multiple queries (to populate a dashboard, for example). If &lt;code&gt;LastUpdated&lt;/code&gt; is not passed in on the request, the proxy can quickly retrieve it in the consumer&amp;rsquo;s behalf and use it to check the cache. Usually it&amp;rsquo;s much easier to get the &lt;code&gt;LastUpdated&lt;/code&gt; value than compute a (potentially complex) query, so the caching layer still provides a lot of value.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;indexes&#34;&gt;Indexes&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Using an index to access your data quickly is a well-known strategy for optimizing data access performance; probably the most well known when it comes to databases. An index makes the trade-offs of increased storage overhead and slower writes (since you must both write the data and update the index) for the benefit of faster reads. &amp;hellip; Just as to a traditional relational data store, you can also apply this concept to larger data sets.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When most developers hear the word &amp;ldquo;indexes&amp;rdquo;, they immediately jump to database indexes. At least this is the case for me. While I find databases indexes to be an interesting topic (to the point that I wrote a &lt;a href=&#34;https://backendology.com/2018/07/23/database-indexes/&#34;&gt;blog post which describes how database indexes work at a low level&lt;/a&gt;), this chapter&amp;rsquo;s explanation helped broaden my thinking around indexes beyond databases.&lt;/p&gt;

&lt;p&gt;Indexes are helpful in the data access layers above the database. Consider a system which is backed by multiple database clusters. Creating an index that maps keys to the database responsible for those keys would eliminate the need to query multiple databases.&lt;/p&gt;

&lt;h4 id=&#34;multiple-layers-of-indexes&#34;&gt;Multiple layers of indexes&lt;/h4&gt;

&lt;p&gt;Once the correct cluster has been identified, another index layer may identify the node within the cluster, and so on. This leads to the point that often creating &lt;strong&gt;multiple layers of indexes&lt;/strong&gt; is worth the increased write latency. This figure from the chapter illustrates how multiple indexes can guide reads to the correct data:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/building-blocks-multiple-layers-indexes.png&#34; width=&#34;100%&#34; alt=&#34;Multiple Layers of Indexes&#34; /&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h4 id=&#34;views&#34;&gt;Views&lt;/h4&gt;

&lt;p&gt;Indexes also allow the same underlying data to be organized differently without resorting to copying through the use of &lt;strong&gt;views&lt;/strong&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Indexes can also be used to create several different views of the same data. For large data sets, this is a great way to define different filters and sorts without resorting to creating many additional copies of the data.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;load-balancers&#34;&gt;Load balancers&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Load balancers are a principal part of any architecture, as their role is to distribute load across a set of nodes responsible for servicing requests. This allows multiple nodes to transparently service the same function in a system.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Like caches, load balancers are placed in many strategic places throughout an architecture. They are also implemented in a variety of ways. There are several comparisons to be aware of in this space:&lt;/p&gt;

&lt;h4 id=&#34;software-and-hardware&#34;&gt;Software and hardware&lt;/h4&gt;

&lt;p&gt;Load balancers can be implemented either in software or hardware. A common commercial hardware offering is &lt;a href=&#34;https://www.f5.com/&#34;&gt;F5&lt;/a&gt; while &lt;a href=&#34;http://www.haproxy.org/&#34;&gt;HAProxy&lt;/a&gt; is best known on the software side.&lt;/p&gt;

&lt;h4 id=&#34;layer-4-and-layer-7&#34;&gt;Layer 4 and Layer 7&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Load balancers are generally grouped into two categories: Layer 4 and Layer 7. Layer 4 load balancers act upon data found in network and transport layer protocols (IP, TCP, FTP, UDP). Layer 7 load balancers distribute requests based upon data found in application layer protocols such as HTTP.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;north-south-and-east-west&#34;&gt;North-south and east-west&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;North-south traffic&lt;/strong&gt; is client to server traffic that originates outside of the datacenter (e.g. traffic routed through edge firewalls and routers). &lt;strong&gt;East-west traffic&lt;/strong&gt; is server to server traffic that originates internal to a datacenter (e.g. traffic over a LAN connection between microservices in a Microservices Architecture).&lt;/p&gt;

&lt;p&gt;Many businesses stand up a hardware load balancer at the edge of their datacenters and then use software load balancing for communication within each datacenter. These additional layers of software load balancing avoid the need to return back to the edge of the network to distribute load to a downstream service.&lt;/p&gt;

&lt;h4 id=&#34;client-side-server-side-and-service-mesh&#34;&gt;Client-side, server-side, and service mesh&lt;/h4&gt;

&lt;p&gt;Traditional load balancing strategies encourage either the client or the server to take responsibility for load balancing. The client might ensure that it properly sends traffic to a server in a distributed manner. A server, on the other hand, could protect itself with a reverse proxy layer that offers load balancing.&lt;/p&gt;

&lt;p&gt;When both clients and servers are part of the same service mesh, they need not directly involve themselves in load balancing. Instead, calls from the client to the server can be transparently load balanced at the cost of some additional latency for a service mesh to distributed the load. Service meshes like &lt;a href=&#34;https://istio.io/&#34;&gt;Istio&lt;/a&gt; are gaining traction as they can provide load balancing, automatic retries, and other helpful features without direct participation from the involved services.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;queues&#34;&gt;Queues&lt;/h3&gt;

&lt;p&gt;Unlike proxies and load balancers which augment an existing architecture and &lt;em&gt;scale reads&lt;/em&gt;, queues have a more dramatic impact on the data flow of the architecture and &lt;em&gt;scale writes&lt;/em&gt;. Queues have this impact by forcing the introduction of &lt;strong&gt;asynchronous processing&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;While a synchronous system tightly couples a request to its immediate response, an asynchronous system separates the two. This is achieved by having clients provide a work request to the queue which is not immediately processed while the clients waits. &amp;ldquo;While the client is waiting for an asynchronous request to be completed it is free to perform other work, even making asynchronous requests of other services.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;In a synchronous system where clients are actively waiting for responses, service outages and intermittent failures are exposed directly to clients. High availability is difficult to provide, especially when the underlying database(s) are under high load and requests time out. Due to the asynchronous nature of queues, they can provide protection from failed requests. This takes away the stress of ensuring that every single request succeeds at the cost of great engineering effort. Retry logic is also much easier to implement in asynchronous processing, avoiding the need for &amp;ldquo;complicated and often inconsistent client-side error handling.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;This added protection from a lack of availability in a downstream service and improved retry logic makes a strong argument for the introduction of more queues into an architecture. The client of a queue can often be unaware that a downstream service was temporarily unavailable.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;http://www.aosabook.org/en/index.html&#34;&gt;http://www.aosabook.org/en/index.html&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;&lt;a href=&#34;http://www.aosabook.org/en/distsys.html&#34;&gt;http://www.aosabook.org/en/distsys.html&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;&lt;a href=&#34;http://www.aosabook.org/en/distsys.html#fig.distsys.9&#34;&gt;http://www.aosabook.org/en/distsys.html#fig.distsys.9&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;&lt;a href=&#34;http://www.aosabook.org/en/distsys.html#fig.distsys.10&#34;&gt;http://www.aosabook.org/en/distsys.html#fig.distsys.10&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;&lt;a href=&#34;http://www.aosabook.org/en/distsys.html#fig.distsys.17&#34;&gt;http://www.aosabook.org/en/distsys.html#fig.distsys.17&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6&#34;&gt;&lt;a href=&#34;https://www.f5.com/services/resources/glossary/load-balancer&#34;&gt;https://www.f5.com/services/resources/glossary/load-balancer&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Introduction to Distributed Systems Course</title>
          <link>https://backendology.com/2018/09/19/distributed-systems-course-introduction/</link>
          <pubDate>Wed, 19 Sep 2018 00:00:00 UTC</pubDate>
          <author>Jared Ririe</author>
          <guid>https://backendology.com/2018/09/19/distributed-systems-course-introduction/</guid>
          <description>

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/distributed-systems-in-the-wild.png&#34; width=&#34;100%&#34; alt=&#34;Distributed Systems in the Wild&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In my &lt;a href=&#34;https://backendology.com/2018/09/10/distributed-systems-course-reading-list/&#34;&gt;previous blog post&lt;/a&gt;, I created a detailed reading list of the distributed systems content I deemed most important and interesting. This post is the next step towards designing a comprehensive course in distributed systems: creating an introductory course.&lt;/p&gt;

&lt;p&gt;Why not simply start at the top of the reading list and work down? I think any good introduction to this topic should provide a sampling of the various concepts and encourage experimentation and hands on learning. I also organized my reading list such that the &amp;ldquo;Distributed systems in the wild&amp;rdquo; section is one of the later sections, but I believe that failing to cover some real systems in an introductory course is a lost opportunity. Students and practitioners often have experience interacting with the user-facing parts of systems like Kafka, Memcache, or Cassandra. Some have a basic understanding of proprietary systems at Google like BigTable or Spanner. Satisfying the curiosity to learn how these systems work under the hood can fuel the harder parts of learning distributed systems, such as grappling with Paxos.&lt;/p&gt;

&lt;p&gt;Speaking of Paxos, it was designed first but the newcomer Raft is intended to be much easier to learn and implement. For this reason, I think an introductory course doesn&amp;rsquo;t need to dive into the details of Paxos. A high-level understanding is sufficient. Implementing Raft, on the other hand, is a surmountable challenge and worth the effort.&lt;/p&gt;

&lt;p&gt;Without further ado, here is my course, &lt;em&gt;Introduction to Distributed Systems&lt;/em&gt;!&lt;/p&gt;

&lt;h2 id=&#34;course&#34;&gt;Course&lt;/h2&gt;

&lt;h3 id=&#34;unit-1-the-problem&#34;&gt;Unit 1: The Problem&lt;/h3&gt;

&lt;p&gt;This unit frames the problem presented by distributed systems. It explains why they are challenging to build correctly, as well as their building blocks, failure modes, and fallacies.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Building blocks&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Read and summarize this chapter from the book &lt;em&gt;The Architecture of Open Source Applications&lt;/em&gt;: &lt;a href=&#34;http://www.aosabook.org/en/distsys.html&#34;&gt;Scalable Web Architecture and Distributed Systems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Core problems&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Read this blog post and list the challenges: &lt;a href=&#34;https://www.somethingsimilar.com/2013/01/14/notes-on-distributed-systems-for-young-bloods/&#34;&gt;Notes on Distributed Systems for Young Bloods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Read and summarize this paper: &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/time-clocks-ordering-events-distributed-system/?from=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fum%2Fpeople%2Flamport%2Fpubs%2Ftime-clocks.pdf&#34;&gt;Time, Clocks, and the Ordering of Events in a Distributed System (Lamport 1978)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Read and summarize this paper: &lt;a href=&#34;http://www.cs.cornell.edu/courses/cs614/2004sp/papers/LSP82.pdf&#34;&gt;The Byzantine Generals Problem (Lamport 1982)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Failure modes&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Read these resources on failure modes: &lt;a href=&#34;http://alvaro-videla.com/2013/12/failure-modes-in-distributed-systems.html&#34;&gt;Failure Modes in Distributed Systems&lt;/a&gt;, &lt;a href=&#34;https://en.wikipedia.org/wiki/Failure_semantics&#34;&gt;Wikipedia: Failure Semantics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/distributed-systems-8-fallacies.png&#34; width=&#34;100%&#34; alt=&#34;Eight Fallacies of Distributed Systems&#34; /&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Fallacies&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Read and summarize this article: &lt;a href=&#34;https://www.rgoarchitects.com/Files/fallacies.pdf&#34;&gt;Fallacies of Distributed Computing Explained&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;(Optional) Scan through this clever slide deck: &lt;a href=&#34;https://drive.google.com/file/d/15nxAaVXZwNFnJNVvgtKonNbzxNgTUCxP/view&#34;&gt;Why Are Distributed Systems So Hard?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;unit-2-distributed-filesystems&#34;&gt;Unit 2: Distributed Filesystems&lt;/h3&gt;

&lt;p&gt;Filesystems are often taught early on as they are the foundation of other distributed systems. Unlike databases which are designed for direct use by applications, filesystems are designed for system to system use.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/google-storage-stack.png&#34; width=&#34;100%&#34; alt=&#34;Google&#39;s Storage Stack&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The above image is from the book &lt;em&gt;Site Reliability Engineering: How Google Runs Production Systems&lt;/em&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; and shows Google&amp;rsquo;s storage stack. The successor to the Google File System is known as Colossus. It provides a filesystem foundation (as well as replication and encryption) to database-like systems such as Spanner and Bigtable. Colossus is built atop D (for Disk) which is a fileserver.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Filesystems&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Read and summarize this paper: &lt;a href=&#34;https://static.googleusercontent.com/media/research.google.com/en//archive/gfs-sosp2003.pdf&#34;&gt;The Google File System (2003)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Using &lt;a href=&#34;https://queue.acm.org/detail.cfm?id=1594206&#34;&gt;this interview about the evolution of GFS&lt;/a&gt;, answer these questions: how did GFS hold up over time? In what ways would they have changed the design after several years of use?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Real world examples: MapReduce and Bigtable&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Read and summarize this paper: &lt;a href=&#34;https://pdos.csail.mit.edu/6.824/papers/mapreduce.pdf&#34;&gt;MapReduce (2004)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Read and summarize this paper: &lt;a href=&#34;http://static.googleusercontent.com/media/research.google.com/en//archive/bigtable-osdi06.pdf&#34;&gt;Bigtable: A Distributed Storage System for Structured Data (2006)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use &lt;a href=&#34;http://highscalability.com/blog/2010/9/11/googles-colossus-makes-search-real-time-by-dumping-mapreduce.html&#34;&gt;this blog post&lt;/a&gt; to answer this question: why did Google eventually move away from GFS and MapReduce?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hands on learning: MapReduce&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Complete this lab: &lt;a href=&#34;https://pdos.csail.mit.edu/6.824/labs/lab-1.html&#34;&gt;MIT 6.824 Lab 1: MapReduce&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;In this lab you&amp;rsquo;ll build a MapReduce library as an introduction to programming in Go and to building fault tolerant distributed systems. In the first part you will write a simple MapReduce program. In the second part you will write a Master that hands out tasks to MapReduce workers, and handles failures of workers. The interface to the library and the approach to fault tolerance is similar to the one described in the original MapReduce paper.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;unit-3-gossip-protocols&#34;&gt;Unit 3: Gossip Protocols&lt;/h3&gt;

&lt;p&gt;Gossip protocols have many important use cases in distributed systems, such as detecting node failure, spreading configuration data, and sharing state among multiple nodes in a cluster. They can elegantly solve problems with relaxed consistency requirements where a distributed consensus algorithm (like Paxos) or a centralized database would be impractical or unwise.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Gossip protocol&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Read and summarize these introductory resources: &lt;a href=&#34;https://en.wikipedia.org/wiki/Gossip_protocol&#34;&gt;Wikipedia: Gossip protocol&lt;/a&gt;, &lt;a href=&#34;http://highscalability.com/blog/2011/11/14/using-gossip-protocols-for-failure-detection-monitoring-mess.html&#34;&gt;Using Gossip Protocols For Failure Detection, Monitoring, Messaging And Other Good Things&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Answer this question: when is a gossip-based solution better than a centralized database or distributed consensus algorithm?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SWIM&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Read and summarize this paper: &lt;a href=&#34;http://www.cs.cornell.edu/info/projects/spinglass/public_pdfs/swim.pdf&#34;&gt;SWIM: Scalable Weakly-consistent Infection-style Process Group Membership Protocol&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Real world example: hashicorp/memberlist&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Study this codebase: &lt;a href=&#34;https://github.com/hashicorp/memberlist&#34;&gt;hashicorp/memberlist&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;The use cases for such a library are far-reaching: all distributed systems require membership, and memberlist is a re-usable solution to managing cluster membership and node failure detection.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Based on the SWIM protocol with some adaptions&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Study how the distributed bitmap index utilizes the memberlist library: &lt;a href=&#34;https://github.com/pilosa/pilosa/blob/10eea2db4cca35dd6b173377edf36790a5f164e6/gossip/gossip.go&#34;&gt;Usage in Pilosa&amp;rsquo;s codebase&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hands on learning: global counter&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Implement a global counter which uses hashicorp/memberlist; use these resources:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nphase/go-clustering-example/blob/master/final/main.go&#34;&gt;github.com/nphase/go-clustering-example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/asim/memberlist&#34;&gt;github.com/asim/memberlist&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;unit-4-solving-distributed-consensus-with-raft&#34;&gt;Unit 4: Solving Distributed Consensus with Raft&lt;/h3&gt;

&lt;p&gt;Distributed consensus is a another fundamental problem in distributed systems. Put simply, it&amp;rsquo;s the problem of a getting multiple nodes to agree on the current state of something&amp;ndash;like the current leader of a clustered database where all writes should be forwarded. Protocols that solve consensus must additionally handle failure of contributing nodes, forcing fault tolerance.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Consensus&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Read and summarize the basic idea of consensus, including the properties it must satisfy: &lt;a href=&#34;https://en.wikipedia.org/wiki/Consensus_(computer_science)&#34;&gt;Wikipedia: Consensus&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Read and summarize this paper: &lt;a href=&#34;http://groups.csail.mit.edu/tds/papers/Lynch/jacm85.pdf&#34;&gt;Impossibility of Distributed Consensus with One Faulty Process (1985)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;One of the most important results in distributed systems theory was published in April 1985 by Fischer, Lynch and Patterson. Their short paper &amp;lsquo;Impossibility of Distributed Consensus with One Faulty Process&amp;rsquo;, which eventually won the Dijkstra award given to the most influential papers in distributed computing, definitively placed an upper bound on what it is possible to achieve with distributed processes in an asynchronous environment.&amp;rdquo; (&lt;a href=&#34;https://www.the-paper-trail.org/post/2008-08-13-a-brief-tour-of-flp-impossibility/&#34;&gt;A Brief Tour of FLP Impossibility&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Raft&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Read and summarize this paper: &lt;a href=&#34;https://pdos.csail.mit.edu/6.824/papers/raft-extended.pdf&#34;&gt;In Search of an Understandable Consensus Algorithm (Extended Version)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Raft is a consensus algorithm for managing a replicated log. It produces a result equivalent to (multi-)Paxos, and it is as efficient as Paxos, but its structure is different from Paxos; this makes Raft more understandable than Paxos and also provides a better foundation for building practical systems.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Use these visualizations to create pseudocode of the algorithm: &lt;a href=&#34;http://thesecretlivesofdata.com/raft/&#34;&gt;Visualization of Raft&lt;/a&gt;, &lt;a href=&#34;https://runway.systems/?model=github.com/ongardie/runway-model-raft&#34;&gt;Runway Raft Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Compare and contrast Raft and Paxos, as well as Two-phase commit&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/distributed-systems-raft-state-diagram.png&#34; width=&#34;100%&#34; alt=&#34;Raft State Diagram&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Real world examples: Consul and etcd&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Study Consul&amp;rsquo;s use of Raft: &lt;a href=&#34;https://www.consul.io/docs/internals/consensus.html&#34;&gt;Consul: Raft Protocol Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Study etcd&amp;rsquo;s use of Raft: &lt;a href=&#34;https://github.com/etcd-io/etcd&#34;&gt;github.com/etcd-io/etcd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Answer this question: why do Consul&amp;rsquo;s and etcd&amp;rsquo;s use cases require distributed consensus?&lt;/li&gt;
&lt;li&gt;Read Chapter 23 of Google&amp;rsquo;s book, &lt;a href=&#34;https://landing.google.com/sre/&#34;&gt;&lt;em&gt;Site Reliability Engineering: How Google Runs Production Systems&lt;/em&gt;&lt;/a&gt;, and explain why consensus leads to improved reliability: &lt;a href=&#34;https://landing.google.com/sre/book/chapters/managing-critical-state.html&#34;&gt;Managing Critical State: Distributed Consensus for Reliability&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hands on learning: Raft&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Complete this lab: &lt;a href=&#34;https://pdos.csail.mit.edu/6.824/labs/lab-raft.html&#34;&gt;MIT 6.824 Lab 2: Raft&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;In this lab you&amp;rsquo;ll implement Raft, a replicated state machine protocol. In the next lab you&amp;rsquo;ll build a key/value service on top of Raft. Then you will shard your service over multiple replicated state machines for higher performance.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;unit-5-consistency-and-availability&#34;&gt;Unit 5: Consistency and Availability&lt;/h3&gt;

&lt;p&gt;Consistency and availability are two system characteristics known to be in conflict. This unit discusses these two characteristics and how to make practical decisions in systems. It discusses the terminology of consistency, the CAP theorem, distributed transactions, and eventual consistency.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/consistency-models.png&#34; width=&#34;100%&#34; alt=&#34;Consistencey Models&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Consistency terminology&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Extract consistency terminology from this diagram: &lt;a href=&#34;http://jepsen.io/consistency&#34;&gt;Consistency Models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Read and summarize this article, which argues that consistency is not one of strong or eventual, but rather a set of guarantees that may or may not be met: &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/replicated-data-consistency-explained-through-baseball/?from=http%3A%2F%2Fresearch.microsoft.com%2Fpubs%2F157411%2Fconsistencyandbaseballreport.pdf&#34;&gt;Replicated Data Consistency Explained Through Baseball&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CAP Theorem&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Read and summarize this paper: &lt;a href=&#34;https://arxiv.org/abs/1509.05393&#34;&gt;A Critique of the CAP Theorem&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;In this paper we survey some of the confusion about the meaning of CAP, including inconsistencies and ambiguities in its definitions, and we highlight some problems in its formalization. CAP is often interpreted as proof that eventually consistent databases have better availability properties than strongly consistent databases; although there is some truth in this, we show that more careful reasoning is required. These problems cast doubt on the utility of CAP as a tool for reasoning about trade-offs in practical systems.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Also see this auxiliary blog post by the author, &lt;a href=&#34;https://martin.kleppmann.com/2015/05/11/please-stop-calling-databases-cp-or-ap.html&#34;&gt;Please stop calling databases CP or AP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Answer this question: is the CAP theorem useful in practice?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Transactions&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Read and summarize this paper: &lt;a href=&#34;http://www.bailis.org/papers/hat-vldb2014.pdf&#34;&gt;Highly Available Transactions: Virtues and Limitations&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;In this work, we consider the problem of providing Highly Available Transactions (HATs): transactional guarantees that do not suffer unavailability during system partitions or incur high network latency.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Read and summarize this paper: &lt;a href=&#34;https://www.ics.uci.edu/~cs223/papers/cidr07p15.pdf&#34;&gt;Life beyond Distributed Transactions&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;This paper explores and names some of the practical approaches used in the implementations of large-scale mission-critical applications in a world which rejects distributed transactions.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Eventual consistency&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Read and summarize this paper: &lt;a href=&#34;https://arxiv.org/abs/0909.1788&#34;&gt;Building on Quicksand&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Emerging patterns of eventual consistency and probabilistic execution may soon yield a way for applications to express requirements for a &amp;ldquo;looser&amp;rdquo; form of consistency while providing availability in the face of ever larger failures.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Answer this question: when is eventual consistency appropriate and when is it potentially dangerous?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Real world examples: Dynamo and Spanner&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Read and summarize this paper: &lt;a href=&#34;http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/decandia07dynamo.pdf&#34;&gt;Dynamo: Amazon&amp;rsquo;s Highly Available Key-value Store (2007)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Read and summarize this paper: &lt;a href=&#34;https://static.googleusercontent.com/media/research.google.com/en//archive/spanner-osdi2012.pdf&#34;&gt;Spanner: Google&amp;rsquo;s Globally-Distributed Database (2012)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;The lack of transactions in Bigtable led to frequent complaints from users, so Google made distributed transactions central to Spanner&amp;rsquo;s design. Based on its experience with Bigtable, Google argues that it is better to have application programmers deal with performance problems due to overuse of transactions as bottlenecks arise, rather than always coding around the lack of transactions.&amp;rdquo;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Also factor in this Google publication that connects Spanner to the CAP theorem: &lt;a href=&#34;https://research.google.com/pubs/pub45855.html?hl=pl&#34;&gt;Spanner, TrueTime &amp;amp; The CAP Theorem&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Hands on learning: Fault-tolerant Key/Value Service&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Complete this lab: &lt;a href=&#34;https://pdos.csail.mit.edu/6.824/labs/lab-kvraft.html&#34;&gt;MIT 6.824 Lab 3: Fault-tolerant Key/Value Service&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;In this lab you will build a fault-tolerant key/value storage service using your Raft library from lab 2. You key/value service will be a replicated state machine, consisting of several key/value servers that use Raft to maintain replication. Your key/value service should continue to process client requests as long as a majority of the servers are alive and can communicate, in spite of other failures or network partitions.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;https://drive.google.com/file/d/15nxAaVXZwNFnJNVvgtKonNbzxNgTUCxP/view&#34;&gt;https://drive.google.com/file/d/15nxAaVXZwNFnJNVvgtKonNbzxNgTUCxP/view&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;&lt;a href=&#34;https://landing.google.com/sre/book/chapters/production-environment.html&#34;&gt;https://landing.google.com/sre/book/chapters/production-environment.html&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Spanner_(database&#34;&gt;https://en.wikipedia.org/wiki/Spanner_(database&lt;/a&gt;)
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Designing a Comprehensive Course in Distributed Systems: Reading List</title>
          <link>https://backendology.com/2018/09/10/distributed-systems-course-reading-list/</link>
          <pubDate>Mon, 10 Sep 2018 00:00:00 UTC</pubDate>
          <author>Jared Ririe</author>
          <guid>https://backendology.com/2018/09/10/distributed-systems-course-reading-list/</guid>
          <description>

&lt;p&gt;In a recent conversation at work, I learned about &lt;a href=&#34;https://pdos.csail.mit.edu/6.824/index.html&#34;&gt;MIT&amp;rsquo;s distributed systems course&lt;/a&gt;. As the majority of the content is available online through the course website, I was just about ready to dive in, follow the course, and report on what I learned. But then I had this thought: I am not formally a student anymore, so I should take more ownership of my learning. I should design my own comprehensive course in distributed systems!&lt;/p&gt;

&lt;p&gt;My course doesn&amp;rsquo;t have to be constrained to a semester in length or only lightly cover topics that I find important and compelling. I&amp;rsquo;ll be able to take a more depth-first approach to learning. For example, after implementing the Raft consensus algorithm, if I feel like there is more to learn, I can take time to build an simple system which uses my Raft code. A university course on a broad topic such as distributed systems has to avoid depth like this in order to cover all the required content. As someone who has been in industry for a few years, I also have a rough idea of which concepts matter in practice because I&amp;rsquo;ve run up against them and struggled to find time to understand them as well as I wanted.&lt;/p&gt;

&lt;h2 id=&#34;why-study-distributed-systems&#34;&gt;Why study distributed systems?&lt;/h2&gt;

&lt;p&gt;First, some motivation. Of all the things to learn about in our field, why study distributed systems? In that same conversation I mentioned above, one of my coworkers said it better than I could:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Developers &lt;em&gt;really&lt;/em&gt; need to know how to deal with concurrency, think in that space, and stop thinking about programs as serial lists of instructions. There is &lt;em&gt;no&lt;/em&gt; demand for someone who can&amp;rsquo;t natively think about concurrency all over their algorithm and their code.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;He went on to argue that an understanding of distributed systems is becoming a hard prerequisite of work done by software developers. While testing and software practice can safely and easily be learned on the job, concepts related to asynchronous concurrent systems often cannot be. Misunderstandings in this regard lead to system outages and incur serious technical debt. To avoid making common mistakes and architecting poor systems, it&amp;rsquo;s critical to take time to seriously learn distributed systems.&lt;/p&gt;

&lt;p&gt;Personally, I feel like I have a good grasp of the fundamentals, but an important next step in my career is learning advanced concepts like consensus and broadcast. &lt;em&gt;Understanding abstractions a level or two below your usage is incredibly worthwhile, not to mention satisfying.&lt;/em&gt; I want to understand the content necessary to be considered a so-called &amp;ldquo;distributed systems engineer.&amp;rdquo; I also think that a few years of distributed systems practice in industry have primed me to better understand these concepts. I&amp;rsquo;ve covered many of them at a high level, so revisiting them with a new perspective will be helpful.&lt;/p&gt;

&lt;h2 id=&#34;creating-a-reading-list&#34;&gt;Creating a reading list&lt;/h2&gt;

&lt;p&gt;What follows is a reading list to capture the breadth of the available content in distributed systems. I&amp;rsquo;ll use it in my next blog post to design the schedule of my course. To create this list, I scoured the internet, literally following hundreds of links. If you are also interested in this topic, I recommend you do the same: make your own reading list that gets you excited to learn more. These are the resources I found most useful in creating my reading list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/theanalyst/awesome-distributed-systems&#34;&gt;Awesome Distributed Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://christophermeiklejohn.com/distributed/systems/2013/07/12/readings-in-distributed-systems.html&#34;&gt;Christopher Meiklejohn: Readings in Distributed Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.the-paper-trail.org/post/2014-08-09-distributed-systems-theory-for-the-distributed-systems-engineer/&#34;&gt;The Paper Trail: necessary distributed systems theory and recommendations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pdos.csail.mit.edu/6.824/schedule.html&#34;&gt;MIT 6.824 Distributed Systems course schedule&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://dsrg.pdos.csail.mit.edu/papers/&#34;&gt;MIT Distributed Systems Reading Group Paper List&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Distributed systems research is known for an abundance of papers. My reading list includes papers as they are the primary source of information in this field of study. Papers are also challenging and I want to get better at understanding them and using them as part of my learning.&lt;/p&gt;

&lt;h2 id=&#34;concepts&#34;&gt;Concepts&lt;/h2&gt;

&lt;h3 id=&#34;basics&#34;&gt;Basics&lt;/h3&gt;

&lt;p&gt;The basics give a sense for why distributed systems present challenging problems. With the problems framed, it will make more sense why we have to think so carefully about the advanced concepts below. For example, understanding that the network is unreliable and packets regularly get dropped makes it clear why it&amp;rsquo;s hard to get multiple nodes of a database to agree on the state of the data.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://book.mixu.net/distsys/single-page.html&#34;&gt;Distributed Systems for Fun and Profit&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Free book that was recommended by several articles&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.aosabook.org/en/distsys.html&#34;&gt;Scalable Web Architecture and Distributed Systems&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Chapter from a free book, &lt;em&gt;The Architecture of Open Source Applications&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Introduces the building blocks of distributed systems, including caches, indexes, load balancers, and queues&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.somethingsimilar.com/2013/01/14/notes-on-distributed-systems-for-young-bloods/&#34;&gt;Notes on Distributed Systems for Young Bloods&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Short blog post written by an experienced distributed systems engineer with an audience of new engineers&lt;/li&gt;
&lt;li&gt;Calls out that coordination is hard, failure of individual components is common, and that metrics and percentiles enable visibility&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://alvaro-videla.com/2013/12/failure-modes-in-distributed-systems.html&#34;&gt;Failure Modes in Distributed Systems&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Short blog post which explains what could otherwise be confusing terminology of types of failure (performance, omission, fail-stop, crash, etc).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aphyr/distsys-class&#34;&gt;An Introduction to Distributed Systems&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Outline to a course taught by Kyle Kingsbury, the creator of the distributed systems tester Jepsen&lt;/li&gt;
&lt;li&gt;Kyle Kingsbury has also given several talks which are &lt;a href=&#34;http://jepsen.io/talks&#34;&gt;available on the Jepsen website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://backendology.com/2018/08/21/microservices-huge-mistake/&#34;&gt;Microservices: Are We Making a Huge Mistake?&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;My previous blog post which covered Microservices (a software development technique for building a software system that runs on a distributed system) and some of the &lt;a href=&#34;https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing&#34;&gt;Fallacies of Distributed Computing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;See this more detailed &lt;a href=&#34;https://www.rgoarchitects.com/Files/fallacies.pdf&#34;&gt;Explanation of the Fallacies&lt;/a&gt; as well&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;consensus&#34;&gt;Consensus&lt;/h3&gt;

&lt;p&gt;The problem of achieving consensus is fundamental to distributed systems. These first several papers are true classics and known well by distributed systems engineers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/distributed-systems-paper.png&#34; width=&#34;100%&#34; alt=&#34;Distributed Systems Paper&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cs.cornell.edu/courses/cs614/2004sp/papers/LSP82.pdf&#34;&gt;The Byzantine Generals Problem (Lamport 1982)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;One of the classic papers which presents a fictitious scenario in war to explain a problem faced by any distributed system&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/time-clocks-ordering-events-distributed-system/?from=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fum%2Fpeople%2Flamport%2Fpubs%2Ftime-clocks.pdf&#34;&gt;Time, Clocks, and the Ordering of Events in a Distributed System (Lamport 1978)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Distributed systems classic and primer by Lamport&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://research.cs.wisc.edu/areas/os/Qual/papers/snapshots.pdf&#34;&gt;Distributed Snapshots: Determining Global States of a Distributed System (1984)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://groups.csail.mit.edu/tds/papers/Lynch/jacm85.pdf&#34;&gt;Impossibility of Distributed Consensus with One Faulty Process (1985)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;One of the most important results in distributed systems theory was published in April 1985 by Fischer, Lynch and Patterson. Their short paper &amp;lsquo;Impossibility of Distributed Consensus with One Faulty Process&amp;rsquo;, which eventually won the Dijkstra award given to the most influential papers in distributed computing, definitively placed an upper bound on what it is possible to achieve with distributed processes in an asynchronous environment.&amp;rdquo;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.the-paper-trail.org/post/2008-08-13-a-brief-tour-of-flp-impossibility/&#34;&gt;A Brief Tour of FLP Impossibility&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;paxos&#34;&gt;Paxos&lt;/h4&gt;

&lt;p&gt;Paxos is a solution to consensus proposed by Lamport himself, the author of several of the classic papers above. You&amp;rsquo;ll hear his name a lot in distributed systems. It&amp;rsquo;s known to be difficult to understand, yet was implemented in several successful distributed systems like Google&amp;rsquo;s Chubby lock service.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cs.utexas.edu/users/lorenzo/corsi/cs380d/past/03F/notes/paxos-simple.pdf&#34;&gt;Paxos Made Simple (2001)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;A shorter and easier to understand explanation of Paxos paper by Lamport&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://static.googleusercontent.com/media/research.google.com/en//archive/paxos_made_live.pdf&#34;&gt;Paxos Made Live (2007)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;We describe our experience building a fault-tolerant database using the Paxos consensus algorithm. Despite the existing literature in the field, building such a database proved to be non-trivial.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Google&amp;rsquo;s learning while implementing systems atop of Paxos. Demonstrates various practical issues encountered while implementing a theoretical concept &amp;hellip;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pdos.csail.mit.edu/6.824/papers/spinnaker.pdf&#34;&gt;Using Paxos to Build a Scalable, Consistent, and Highly Available Datastore (2011)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Describes the experimental datastore Spinnaker which utilizes Paxos replication&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;two-phase-and-three-phase-commit-2pc-and-3pc&#34;&gt;Two-phase and three-phase commit (2PC and 3PC)&lt;/h4&gt;

&lt;p&gt;2PC and 3PC do not attempt to solve consensus entirely. Instead, they limited in scope to transaction commit protocols. They are often compared to Paxos as understanding their differences is insightful.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.the-paper-trail.org/post/2008-11-27-consensus-protocols-two-phase-commit/&#34;&gt;Two-phase commit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.the-paper-trail.org/post/2008-11-29-consensus-protocols-three-phase-commit/&#34;&gt;Three-phase commit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;raft&#34;&gt;Raft&lt;/h4&gt;

&lt;p&gt;Raft, which is much newer than Paxos (2013 compared to 1989), is meant to be a simplified, understandable version of Paxos. It has quickly become a core part of the backbone of distributed systems as it&amp;rsquo;s used in open source software like etcd and Consul.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/raft-visualization.png&#34; width=&#34;100%&#34; alt=&#34;Raft Visualization&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pdos.csail.mit.edu/6.824/papers/raft-extended.pdf&#34;&gt;In Search of an Understandable Consensus Algorithm (Extended Version)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Raft is a consensus algorithm for managing a replicated log. It produces a result equivalent to (multi-)Paxos, and it is as efficient as Paxos, but its structure is different from Paxos; this makes Raft more understandable than Paxos and also provides a better foundation for building practical systems.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://thesecretlivesofdata.com/raft/&#34;&gt;Visualization of Raft&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Interactive visualization of the consensus algorithm to explain concepts like distributed consensus, leader election, and log replication&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.consul.io/docs/internals/consensus.html&#34;&gt;Consul: Raft Protocol Overview&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Consul implements Raft. This page describes Raft and how it is used&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/etcd-io/etcd&#34;&gt;etcd&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;etcd is written in Go and uses the Raft consensus algorithm to manage a highly-available replicated log.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pdos.csail.mit.edu/6.824/labs/lab-raft.html&#34;&gt;MIT 6.824 Lab 2: Raft&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;In this lab you&amp;rsquo;ll implement Raft, a replicated state machine protocol. In the next lab you&amp;rsquo;ll build a key/value service on top of Raft. Then you will shard your service over multiple replicated state machines for higher performance.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pdos.csail.mit.edu/6.824/labs/lab-kvraft.html&#34;&gt;MIT 6.824 Lab 3: Fault-tolerant Key/Value Service&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;In this lab you will build a fault-tolerant key/value storage service using your Raft library from lab 2. You key/value service will be a replicated state machine, consisting of several key/value servers that use Raft to maintain replication. Your key/value service should continue to process client requests as long as a majority of the servers are alive and can communicate, in spite of other failures or network partitions.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;broadcast&#34;&gt;Broadcast&lt;/h3&gt;

&lt;h4 id=&#34;atomic-or-total-order-broadcast&#34;&gt;Atomic or total order broadcast&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Atomic broadcast is exactly as hard as consensus - in a precise sense, if you solve atomic broadcast, you solve consensus, and vice versa.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Atomic_broadcast&#34;&gt;Wikipedia: Atomic broadcast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.tcs.hut.fi/Studies/T-79.5001/reports/2012-deSouzaMedeiros.pdf&#34;&gt;ZooKeeper&amp;rsquo;s atomic broadcast protocol: Theory and practice (2012)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;ZooKeeper Atomic Broadcast (ZAB) protocol is what enables ZooKeeper&amp;rsquo;s fault tolerance&lt;/li&gt;
&lt;li&gt;&amp;ldquo;At its core lies an atomic broadcast protocol, which elects a leader, synchronizes the nodes, and performs broadcasts of updates from the leader. We study the design of this protocol, highlight promised properties, and analyze its official implementation by Apache. In particular, the default leader election protocol is studied in detail.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;gossip-based-broadcast&#34;&gt;Gossip-based broadcast&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Gossip_protocol&#34;&gt;Wikipedia: Gossip protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cs.cornell.edu/info/projects/spinglass/public_pdfs/swim.pdf&#34;&gt;SWIM: Scalable Weakly-consistent Infection-style Process Group Membership Protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hashicorp/memberlist&#34;&gt;hashicorp/memberlist&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;The use cases for such a library are far-reaching: all distributed systems require membership, and memberlist is a re-usable solution to managing cluster membership and node failure detection.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Based on the SWIM protocol with some adaptions&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pilosa/pilosa/blob/10eea2db4cca35dd6b173377edf36790a5f164e6/gossip/gossip.go&#34;&gt;Pilosa&amp;rsquo;s use of hashicorp/memberlist for Gossip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.serf.io/intro/vs-consul.html&#34;&gt;Serf&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.serf.io/docs/internals/gossip.html&#34;&gt;Serf: Gossip Protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Serf uses a gossip protocol to broadcast messages to the cluster. &amp;hellip; [The protocol] is based on &amp;ldquo;SWIM: Scalable Weakly-consistent Infection-style Process Group Membership Protocol&amp;rdquo;, with a few minor adaptations, mostly to increase propagation speed and convergence rate.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jacobmartins.com/2017/01/29/practical-golang-building-a-simple-distributed-one-value-database-with-hashicorp-serf/&#34;&gt;Practical Golang: Building a simple, distributed one-value database with Hashicorp Serf&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;availability-replication-and-partitioning&#34;&gt;Availability, replication, and partitioning&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ilyavolodarsky.com/distributed-systems-take-responsibility-for-failover/&#34;&gt;Distributed Systems: Take Responsibility for Failover&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Short blog post that argues that systems capable of automatically making failover decisions lead to improved maintainability&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.bailis.org/papers/hat-vldb2014.pdf&#34;&gt;Highly Available Transactions: Virtues and Limitations&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;In this work, we consider the problem of providing Highly Available Transactions (HATs): transactional guarantees that do not suffer unavailability during system partitions or incur high network latency.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/State_machine_replication&#34;&gt;Distributed state machine replication&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pdos.csail.mit.edu/6.824/labs/lab-shard.html&#34;&gt;MIT 6.824 Lab 4: Sharded Key/Value Service&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;In this lab you&amp;rsquo;ll build a key/value storage system that &amp;ldquo;shards,&amp;rdquo; or partitions, the keys over a set of replica groups. A shard is a subset of the key/value pairs; for example, all the keys starting with &amp;ldquo;a&amp;rdquo; might be one shard, all the keys starting with &amp;ldquo;b&amp;rdquo; another, etc. The reason for sharding is performance. Each replica group handles puts and gets for just a few of the shards, and the groups operate in parallel; thus total system throughput (puts and gets per unit time) increases in proportion to the number of groups.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;eventual-consistency&#34;&gt;Eventual consistency&lt;/h3&gt;

&lt;p&gt;Eventual consistency is a response to challenge of creating fault-tolerant systems. It implies weaker guarantees about how the system will behave when faults occur.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/consistency-models.png&#34; width=&#34;100%&#34; alt=&#34;Consistencey Models&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jepsen.io/consistency&#34;&gt;Consistency Models&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Prerequisite to the other resources; defines the terminology used when discussing consistency&lt;/li&gt;
&lt;li&gt;Graph showing the relationships between consistency models in databases like Strict Serializable and Linearizability&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ics.uci.edu/~cs223/papers/cidr07p15.pdf&#34;&gt;Life beyond Distributed Transactions&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;This paper explores and names some of the practical approaches used in the implementations of large-scale mission-critical applications in a world which rejects distributed transactions.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cs-www.cs.yale.edu/homes/dna/papers/abadi-pacelc.pdf&#34;&gt;Consistency Tradeoffs in Modern Distributed Database System Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/0909.1788&#34;&gt;Building on Quicksand&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Emerging patterns of eventual consistency and probabilistic execution may soon yield a way for applications to express requirements for a &amp;ldquo;looser&amp;rdquo; form of consistency while providing availability in the face of ever larger failures.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.allthingsdistributed.com/2008/12/eventually_consistent.html&#34;&gt;Eventually Consistent - Revisited&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Great discussion of the tradeoffs one makes in choosing eventual consistency&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://queue.acm.org/detail.cfm?id=2745385&#34;&gt;There is No Now&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Reminder of the impossibility of instantaneous communication and the implications for distributed systems&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://arxiv.org/abs/1509.05393&#34;&gt;A Critique of the CAP Theorem&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;In this paper we survey some of the confusion about the meaning of CAP, including inconsistencies and ambiguities in its definitions, and we highlight some problems in its formalization. CAP is often interpreted as proof that eventually consistent databases have better availability properties than strongly consistent databases; although there is some truth in this, we show that more careful reasoning is required. These problems cast doubt on the utility of CAP as a tool for reasoning about trade-offs in practical systems.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Also see this auxiliary post by the author, &lt;a href=&#34;https://martin.kleppmann.com/2015/05/11/please-stop-calling-databases-cp-or-ap.html&#34;&gt;Please stop calling databases CP or AP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;tangential-concepts&#34;&gt;Tangential concepts&lt;/h3&gt;

&lt;p&gt;Concepts/technologies that often come up in a discussion of distributed systems, but did not fit well into any of the other sections.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.akamai.com/us/en/multimedia/documents/technical-publication/consistent-hashing-and-random-trees-distributed-caching-protocols-for-relieving-hot-spots-on-the-world-wide-web-technical-publication.pdf&#34;&gt;Consistent Hashing and Random Trees&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Queues

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=1bNOO3xxMc0&#34;&gt;Everything Will Flow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;RPC

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/pkg/net/rpc/&#34;&gt;Go RPC package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;distributed-systems-in-the-wild&#34;&gt;Distributed systems in the wild&lt;/h3&gt;

&lt;p&gt;Distributed systems theory becomes practical through its implementation in production systems. Studying successful systems of this nature like Spanner, Kafka, and Dynamo is exceptionally interesting and valuable.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pdos.csail.mit.edu/6.824/papers/gfs.pdf&#34;&gt;The Google File System (2003)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Example of a distributed file system&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pdos.csail.mit.edu/6.824/papers/mapreduce.pdf&#34;&gt;MapReduce (2004)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pdos.csail.mit.edu/6.824/labs/lab-1.html&#34;&gt;MIT 6.824 Lab 1: MapReduce&lt;/a&gt; &amp;ldquo;In this lab you&amp;rsquo;ll build a MapReduce library as an introduction to programming in Go and to building fault tolerant distributed systems. In the first part you will write a simple MapReduce program. In the second part you will write a Master that hands out tasks to MapReduce workers, and handles failures of workers. The interface to the library and the approach to fault tolerance is similar to the one described in the original MapReduce paper.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://static.googleusercontent.com/media/research.google.com/en//archive/bigtable-osdi06.pdf&#34;&gt;Bigtable: A Distributed Storage System for Structured Data (2006)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Bigtable is a distributed storage system for managing structured data that is designed to scale to a very large size: petabytes of data across thousands of commodity servers.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://static.googleusercontent.com/media/research.google.com/en//archive/chubby-osdi06.pdf&#34;&gt;Chubby Lock Manager (2006)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Google&amp;rsquo;s lock management service. Sometimes referred to as &amp;ldquo;Paxos as a Service&amp;rdquo; used by other distributed systems.&lt;/li&gt;
&lt;li&gt;Inspired other service discovery tools like Consul and etcd&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://static.googleusercontent.com/media/research.google.com/en//archive/spanner-osdi2012.pdf&#34;&gt;Spanner: Google&amp;rsquo;s Globally-Distributed Database (2012)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;The lack of transactions in Bigtable led to frequent complaints from users, so Google made distributed transactions central to Spanner&amp;rsquo;s design. Based on its experience with Bigtable, Google argues that it is better to have application programmers deal with performance problems due to overuse of transactions as bottlenecks arise, rather than always coding around the lack of transactions.&amp;rdquo;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pdos.csail.mit.edu/6.824/papers/memcache-fb.pdf&#34;&gt;Scaling Memcache at Facebook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/decandia07dynamo.pdf&#34;&gt;Dynamo: Amazon&amp;rsquo;s Highly Available Key-value Store (2007)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Describes a highly available and fault tolerant database&lt;/li&gt;
&lt;li&gt;Inspired Cassandra and other similar databases&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cs.cornell.edu/projects/ladis2009/papers/lakshman-ladis2009.pdf&#34;&gt;Cassandra: A Decentralized Structured Storage System (2009)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.usenix.org/legacy/event/usenix10/tech/full_papers/Hunt.pdf&#34;&gt;ZooKeeper: Wait-free coordination for Internet-scale systems (2010)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Distributed coordination service used by other distributed systems like Kafka&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://notes.stephenholiday.com/Kafka.pdf&#34;&gt;Kafka: a Distributed Messaging System for Log Processing (2011)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;We introduce Kafka, a distributed messaging system that we developed for collecting and delivering high volumes of log data with low latency.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cseweb.ucsd.edu/~gmporter/classes/fa17/cse124/post/schedule/p74-dean.pdf&#34;&gt;The Tail at Scale&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Article that asserts that the challenge of keeping the tail of the latency distribution low is critical in interactive services&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://landing.google.com/sre/book/chapters/managing-critical-state.html&#34;&gt;Managing Critical State: Distributed Consensus for Reliability&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Chapter 23 of Google&amp;rsquo;s phenomenal book, &lt;a href=&#34;https://landing.google.com/sre/&#34;&gt;&lt;em&gt;Site Reliability Engineering: How Google Runs Production Systems&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Practical exploration of using distributed consensus for increased reliability&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;resources&#34;&gt;Resources&lt;/h2&gt;

&lt;h3 id=&#34;blogs&#34;&gt;Blogs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://highscalability.com/&#34;&gt;High Scalability&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Building bigger, faster, more reliable websites.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Shares some of the design decisions made in building &lt;a href=&#34;http://highscalability.com/blog/2013/7/8/the-architecture-twitter-uses-to-deal-with-150m-active-users.html&#34;&gt;Twitter&lt;/a&gt; and &lt;a href=&#34;http://highscalability.com/blog/2014/2/26/the-whatsapp-architecture-facebook-bought-for-19-billion.html&#34;&gt;WhatsApp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.allthingsdistributed.com/&#34;&gt;All Things Distributed&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Werner Vogels&amp;rsquo; weblog on building scalable and robust distributed systems.&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://martin.kleppmann.com/&#34;&gt;Martin Kleppmann&amp;rsquo;s Blog&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Author of &lt;em&gt;Designing Data Intensive Applications&lt;/em&gt;, which has a chapter that covers distributed systems theory&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;courses&#34;&gt;Courses&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cs.cmu.edu/~dga/15-440/F12/syllabus.html&#34;&gt;Carnegie Mellon University: Distributed Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://courses.cs.washington.edu/courses/csep552/16wi/&#34;&gt;University of Washington: Distributed Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pdos.csail.mit.edu/6.824/index.html&#34;&gt;MIT 6.824: Distributed Systems Engineering&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I found these courses in &lt;a href=&#34;https://github.com/prakhar1989/awesome-courses&#34;&gt;this curated list of awesome Computer Science courses&lt;/a&gt; available online. Here is a similar list, except it focuses on &lt;a href=&#34;https://github.com/golang/go/wiki/Courses&#34;&gt;courses using Go&lt;/a&gt;, many of which cover concurrency and distributed systems.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:2&#34;&gt;&lt;a href=&#34;https://www.the-paper-trail.org/post/2008-08-13-a-brief-tour-of-flp-impossibility/&#34;&gt;https://www.the-paper-trail.org/post/2008-08-13-a-brief-tour-of-flp-impossibility/&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;https://www.the-paper-trail.org/post/2014-08-09-distributed-systems-theory-for-the-distributed-systems-engineer/&#34;&gt;https://www.the-paper-trail.org/post/2014-08-09-distributed-systems-theory-for-the-distributed-systems-engineer/&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Spanner_(database&#34;&gt;https://en.wikipedia.org/wiki/Spanner_(database&lt;/a&gt;)
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Newsletter for Hugo Blog</title>
          <link>https://backendology.com/2018/08/31/hugo-newsletter/</link>
          <pubDate>Fri, 31 Aug 2018 00:00:00 UTC</pubDate>
          <author>Jared Ririe</author>
          <guid>https://backendology.com/2018/08/31/hugo-newsletter/</guid>
          <description>

&lt;p&gt;As an update to my &lt;a href=&#34;https://backendology.com/2018/08/13/experience-using-hugo/&#34;&gt;previous blog post&lt;/a&gt; which compared blog and website creation options, I chose the static site generator Hugo for my blog. I have enjoyed working with it so far! While some aspects of Wordpress have been trivial to replace due to first-class support for them in Hugo, other features have required more work. In this post, I will explain my replacement for Wordpress&amp;rsquo;s newsletter (email list) functionality. My solution utilizes &lt;a href=&#34;https://tinyletter.com/&#34;&gt;TinyLetter&lt;/a&gt; and &lt;a href=&#34;https://zapier.com/apps/integrations&#34;&gt;Zapier&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;tinyletter&#34;&gt;TinyLetter&lt;/h2&gt;

&lt;h3 id=&#34;step-1-set-up-a-tinyletter-account&#34;&gt;Step 1: Set up a TinyLetter account&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/newsletter-01.png&#34; width=&#34;100%&#34; alt=&#34;Step 1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;TinyLetter is a personal newsletter service created by the same people who make MailChimp.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;TinyLetter is for people who don&amp;rsquo;t need all the business features that come along with MailChimp. Simplicity is at the heart of everything we do at TinyLetter.&lt;/p&gt;

&lt;p&gt;TinyLetter is a completely free service.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Unfortunately, the company plans to merge TinyLetter into their MailChimp offering.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; I still recommend it for the time being due to its sheer simplicity.&lt;/p&gt;

&lt;h3 id=&#34;step-2-configure-your-newsletter&#34;&gt;Step 2: Configure your newsletter&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/newsletter-02.png&#34; width=&#34;100%&#34; alt=&#34;Step 2&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Configure your newsletter with a title and description. These will appear on a subscriber page your readers will use to enter their email addresses. &lt;a href=&#34;https://tinyletter.com/jaredririe&#34;&gt;Here&lt;/a&gt; is what mine looks like.&lt;/p&gt;

&lt;p&gt;Make note of your secret TinyLetter email address (shown in yellow in the above image). This is the address to which you will send your newsletter. TinyLetter then stylizes your content and sends it on to your subscriber list.&lt;/p&gt;

&lt;h2 id=&#34;zapier&#34;&gt;Zapier&lt;/h2&gt;

&lt;p&gt;Zapier is a service that allows you to set up integrations (called zaps) between other web services, email, RSS, apps, devices, etc. You configure a trigger and then a series of actions to run. An alternative is &lt;a href=&#34;https://ifttt.com/&#34;&gt;IFTTT (if this, then that)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s worth noting that Zapier isn&amp;rsquo;t required for a working newsletter. You could simply &lt;em&gt;manually&lt;/em&gt; send an email to the TinyLetter address above with the contents of each new blog. That said, I highly recommend a tool like Zapier as it automates this process for greater uniformity and efficiency.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll configure Zapier to check your blog&amp;rsquo;s RSS feed every 5 minutes. When it detects a new post, it will automatically format and send an email to TinyLetter.&lt;/p&gt;

&lt;h3 id=&#34;step-3-set-up-a-zapier-account&#34;&gt;Step 3: Set up a Zapier account&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/newsletter-03.png&#34; width=&#34;100%&#34; alt=&#34;Step 3&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Sign up for a free Zapier account &lt;a href=&#34;https://zapier.com/apps/integrations&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;step-4-create-a-new-zap&#34;&gt;Step 4: Create a new Zap&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/newsletter-04.png&#34; width=&#34;100%&#34; alt=&#34;Step 4&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;step-5-configure-the-trigger-to-be-an-rss-feed&#34;&gt;Step 5: Configure the trigger to be an RSS feed&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/newsletter-05.png&#34; width=&#34;100%&#34; alt=&#34;Step 5a&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/newsletter-06.png&#34; width=&#34;100%&#34; alt=&#34;Step 5b&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Your blog should have a publicly exposed RSS feed for this to work. &lt;a href=&#34;https://backendology.com/feed.xml&#34;&gt;Here&amp;rsquo;s mine&lt;/a&gt; to see what it might look like.&lt;/p&gt;

&lt;h3 id=&#34;step-6-configure-the-action-to-be-an-outbound-email&#34;&gt;Step 6: Configure the action to be an outbound email&lt;/h3&gt;

&lt;p&gt;This zap will be quite simple and have a single action, to send an outbound email; the implication of this is that I&amp;rsquo;ll send a newsletter about each new blog post. You may want your zap to be a bit more complicated. For example, let&amp;rsquo;s assume that you write a few posts each month, but would only like to send an email once a month with a &lt;em&gt;digest&lt;/em&gt; of your posts. To get this working, your first action would be to &amp;ldquo;Append Entry and Schedule Digest&amp;rdquo; and your second action would send the outbound email.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/newsletter-07.png&#34; width=&#34;100%&#34; alt=&#34;Step 6a&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/newsletter-08.png&#34; width=&#34;100%&#34; alt=&#34;Step 6b&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Remember your TinyLetter email address from step 2? This is where you&amp;rsquo;ll use it. Put it in the &amp;ldquo;To&amp;rdquo; field. Then, chose what will go in the subject line. I chose to have the name of my blog (Backendology) followed by the title of the post. Zapier pulls this from the RSS feed.&lt;/p&gt;

&lt;h3 id=&#34;step-7-format-your-email-based-on-the-contents-of-the-rss-feed&#34;&gt;Step 7: Format your email based on the contents of the RSS feed&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/newsletter-09.png&#34; width=&#34;100%&#34; alt=&#34;Step 7&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Format your email as you see fit. I have the title, the link, and the raw HTML content of my blog post. The HTML will render nicely in the email and give it a similar appearance to your actual blog post.&lt;/p&gt;

&lt;h3 id=&#34;step-8-enable-your-zap&#34;&gt;Step 8: Enable your Zap&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/newsletter-10.png&#34; width=&#34;100%&#34; alt=&#34;Step 8&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Zaps are disabled by default, so make sure to enable yours. Once enabled, it will automatically check your RSS feed every five minutes.&lt;/p&gt;

&lt;h2 id=&#34;test-it&#34;&gt;Test it!&lt;/h2&gt;

&lt;h3 id=&#34;step-9-send-a-test-email-and-verify-the-result&#34;&gt;Step 9: Send a test email and verify the result&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/newsletter-11.png&#34; width=&#34;100%&#34; alt=&#34;Step 9&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Zapier allows you to run a test of your zap. This is helpful as you can verify that it properly sends the email and then TinyLetter takes over and gets the email to all of your subscribers (likely just yourself at this point). Did the email come through as you hoped?&lt;/p&gt;

&lt;h2 id=&#34;your-blog&#34;&gt;Your Blog&lt;/h2&gt;

&lt;h3 id=&#34;step-10-link-to-your-tinyletter-subscriber-page&#34;&gt;Step 10: Link to your TinyLetter subscriber page&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/newsletter-12.png&#34; width=&#34;100%&#34; alt=&#34;Step 10&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, link to your subscriber page on your blog in a place your readers will find it! I created a new &lt;a href=&#34;https://backendology.com/subscribe/&#34;&gt;fixed page on my blog&lt;/a&gt; for this purpose and a link to that page on every post:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;layouts/post/single.html&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h3&lt;/span&gt;&amp;gt;Subscribe&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h3&lt;/span&gt;&amp;gt;
&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/subscribe&amp;#34;&lt;/span&gt;&amp;gt;Subscribe via my newsletter or RSS feed&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;layouts/fixed/subscribe.html&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;post&amp;#34;&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;post-title&amp;#34;&lt;/span&gt;&amp;gt;{{ .Title }}&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;h1&lt;/span&gt;&amp;gt;

  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;Thank you for reading my blog!&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;

  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;Sign up for my &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;{{ .Site.Params.NewsletterSignup }}&amp;#34;&lt;/span&gt;&amp;gt;email newsletter&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt; or use this &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/feed.xml&amp;#34;&lt;/span&gt;&amp;gt;RSS feed&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;a&lt;/span&gt;&amp;gt; to get notified of new blog posts.&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;p&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;https://www.tinyletter.com/site/about/&#34;&gt;https://www.tinyletter.com/site/about/&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;&lt;a href=&#34;http://uk.businessinsider.com/tinyletter-will-fold-into-mailchimp-in-the-future-but-its-not-going-to-happen-in-2018-2018-1?r=US&amp;amp;IR=T&#34;&gt;http://uk.businessinsider.com/tinyletter-will-fold-into-mailchimp-in-the-future-but-its-not-going-to-happen-in-2018-2018-1?r=US&amp;amp;IR=T&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Multiple Layers of Caching</title>
          <link>https://backendology.com/2018/08/27/multiple-layers-caching/</link>
          <pubDate>Mon, 27 Aug 2018 00:00:00 UTC</pubDate>
          <author>Jared Ririe</author>
          <guid>https://backendology.com/2018/08/27/multiple-layers-caching/</guid>
          <description>

&lt;p&gt;Caching is one of my favorite topics in technology. I&amp;rsquo;ve been fortunate enough to approach this problem from both a hardware and software perspective. This blog post will cover some of the basics of caching, yet focus on the importance of having &lt;strong&gt;multiple layers&lt;/strong&gt; of caching in a system. I think this is a key point worth emphasizing as I&amp;rsquo;ve seen it commonly misunderstood.&lt;/p&gt;

&lt;h2 id=&#34;a-caching-anecdote&#34;&gt;A caching anecdote&lt;/h2&gt;

&lt;p&gt;One of the systems I built at Qualtrics could be described as the &amp;ldquo;back of the backend&amp;rdquo; as it was a critical storage system that many services relied on, yet had no service dependencies itself. In this position, it was subject to any and all misuse by its consumers. It suffered from what I grew to call the &lt;strong&gt;multiplier effect&lt;/strong&gt;, a condition where a single request (perhaps from a user clicking a button in a UI) caused a few hundred requests and for each one of those requests, issued several more requests, and so on, leading to potentially thousands of requests making it to the back of the backend. I recall determining that the cause of 17,000 requests to my service within a few minutes was caused by the click of an Export button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/caching-multiplier-effect.png&#34; width=&#34;100%&#34; alt=&#34;Multiplier Effect&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s talk about those 17,000 requests some more. If each request was unique and necessary for the result to be produced, then so be it. We should scale our services to handle the load. Maybe throw in some rate limiting so we can throttle the traffic at the cost of increased latency. As you can probably guess in the context of a blog post on caching, however, these 17,000 requests were for a mere handful of objects &lt;em&gt;that rarely change&lt;/em&gt;!&lt;/p&gt;

&lt;p&gt;While our service handled the request load adequately in this case, my team became motivated to start tracking down obviously bad patterns like this to see what we could do to help our consumers utilize our service more efficiently. It was in this process that I came to understand a core principle: &lt;strong&gt;performant systems require multiple layers of caching with participation from both clients and servers&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;reasons-consumers-chose-not-to-cache&#34;&gt;Reasons consumers chose not to cache&lt;/h2&gt;

&lt;p&gt;In talking to consumers about why they were not caching, we heard several reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Our service is just a stateless worker processing a job queue&lt;/li&gt;
&lt;li&gt;There isn&amp;rsquo;t any way for us to know when we should invalidate our cache&lt;/li&gt;
&lt;li&gt;The backend already has a few layers of caching, so it&amp;rsquo;s unnecessary&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s talk through each of these cases and see if we can come up with a way to still introduce caching.&lt;/p&gt;

&lt;h3 id=&#34;stateless-worker&#34;&gt;Stateless worker&lt;/h3&gt;

&lt;p&gt;Example scenario: the client is pulling jobs off of a queue, doing some work, making requests to external services, and moving onto the next job. Each job starts with an allotted amount of memory and can’t reasonably cache things in that space.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/caching-worker.png&#34; width=&#34;100%&#34; alt=&#34;Stateless Worker Cache&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Potential solution: make requests through a reverse proxy cache. This is a proxy layer with a cache that represents an external API. When a request is received, it determines whether a cached response is ready; if not, it makes the request to the external API and caches it for later. Not all requests will be cacheable, so this service acts as a best-effort caching layer that reserves the right to fall back on the &amp;ldquo;origin&amp;rdquo; external service.&lt;/p&gt;

&lt;h3 id=&#34;invalidation-concerns&#34;&gt;Invalidation concerns&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s fair to be concerned about invalidation: you are just a consumer making it challenging to know when the data changes and therefore should be invalidated.&lt;/p&gt;

&lt;p&gt;Potential solution: configure your cache to expire after a given amount of time, known as TTL (time to live). If the cached data rarely changes, risk a long TTL. If consistency is of utmost importance and data changes regularly, have a short TTL.&lt;/p&gt;

&lt;p&gt;Consider an example API that returns a time value. If the value is years, it’s obviously highly cacheable. If it’s milliseconds, it’s not very cacheable. But even in the millisecond case, a short TTL cache could still make sense to give several requests a &amp;ldquo;snapshot&amp;rdquo; of the data. Requests made to populate a single web page have this quality: would you rather make a slew of requests against a consistent view of the data, or make half of the requests against a different version of the underlying data because it changed mid-load? The consistent view makes a lot of sense for most use cases, making a short (maybe 5-20 seconds) TTL cache very attractive.&lt;/p&gt;

&lt;h3 id=&#34;redundant-caching&#34;&gt;Redundant caching&lt;/h3&gt;

&lt;p&gt;The argument that &amp;ldquo;the server is caching, so why should the client?&amp;rdquo; is very common in my experience. Perhaps it&amp;rsquo;s because we&amp;rsquo;re taught as developers to avoid duplication (&lt;em&gt;Don&amp;rsquo;t Repeat Yourself&lt;/em&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;). One might argue that several teams implementing caching is a form of wasteful duplication of effort. While multiple layers of caching can introduce complexity to a system, it&amp;rsquo;s not wasteful and not even true duplication because client-side and server-side caching are potentially very different.&lt;/p&gt;

&lt;h2 id=&#34;memory-hierarchy&#34;&gt;Memory hierarchy&lt;/h2&gt;

&lt;p&gt;My first in-depth introduction to the concept of caching was in the context of hardware in a Computer Architecture class. In this class, I learned about the fascinating topic of the memory hierarchy&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; which I think has some striking parallels to caching in a distributed system.&lt;/p&gt;

&lt;p&gt;The memory hierarchy organizes the various forms of computer storage (CPU caches, RAM, disks) according to response time. The registers in a processor are the fastest possible, usually requiring only a single CPU cycle to retrieve their contents. Next is the processor cache which itself has multiple levels (L0, L1, and so on). Access speed for L1 data cache is around 700 GB/s. Next in the hierarchy is main memory (RAM) with speeds of 10 GB/s. Then comes disk storage at 2000 MB/s. The bottom of the hierarchy varies depending on use case, but could be a cloud-based storage system or nearline storage which allows exabytes of data at an access speed of 160 MB/s.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/caching-memory-hierarchy.png&#34; width=&#34;100%&#34; alt=&#34;Memory Hierarchy&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Each storage system in the hierarchy can be thought of as a caching layer. Just like a computer system would be terribly slow and unusable without RAM, a distributed system without some layers of caching would likewise not perform optimally. What we&amp;rsquo;re seeing here is the benefit of data locality. A RAM cache is much faster than a disk-based cache, but cache memory is much faster than a RAM cache because it&amp;rsquo;s so close to the CPU! When we can get data close to the system that&amp;rsquo;s processing it, our throughput increases dramatically.&lt;/p&gt;

&lt;p&gt;A key property of the memory hierarchy is that one of the main ways to increase system performance is to &amp;ldquo;minimize how far down the [hierarchy] one has to go to manipulate data.&amp;rdquo;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; The same is true of a request as it flows through a system: if the data is cached in a client-side application, it doesn&amp;rsquo;t have to make network hops to a backend system, wait for a database query to run, and propagate the response back up.&lt;/p&gt;

&lt;h2 id=&#34;the-power-of-client-side-caching&#34;&gt;The power of client-side caching&lt;/h2&gt;

&lt;p&gt;In general, clients have a better sense than the server about workflows that could be aided by caching. As a defensive mechanism, the backend can try to identify highly-requested objects and cache them. While this is helpful, it&amp;rsquo;s a &lt;em&gt;reactive&lt;/em&gt; strategy. The client can &lt;em&gt;proactively&lt;/em&gt; cache an object that it is likely to request a lot, saving network calls and bandwidth.&lt;/p&gt;

&lt;p&gt;Clients can also set a more accurate TTL for the cache. A backend server with a defensive cache might set a relatively short TTL to ensure that the data doesn&amp;rsquo;t go stale&amp;ndash;servers must respond to the varied needs of many clients, so they have to make safe decisions. On the other hand, one particular client may not be sensitive to stale data, so they set their cache&amp;rsquo;s TTL to an hour.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34;&gt;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Memory_hierarchy&#34;&gt;https://en.wikipedia.org/wiki/Memory_hierarchy&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Microservices: Are We Making a Huge Mistake?</title>
          <link>https://backendology.com/2018/08/21/microservices-huge-mistake/</link>
          <pubDate>Tue, 21 Aug 2018 00:00:00 UTC</pubDate>
          <author>Jared Ririe</author>
          <guid>https://backendology.com/2018/08/21/microservices-huge-mistake/</guid>
          <description>

&lt;p&gt;There is a clear trend in the software industry moving away from large, monolithic systems to fine-grained services known as &amp;ldquo;microservices.&amp;rdquo; While compelling, microservices introduce their own set of challenges and fallacies. This post considers the benefits and drawbacks of a microservices architecture (MSA) and contemplates the question: are we making a huge mistake in adopting this kind of architecture?&lt;/p&gt;

&lt;h2 id=&#34;relationship-to-distributed-systems&#34;&gt;Relationship to &amp;ldquo;distributed systems&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;First, let&amp;rsquo;s clear up some terminology that you may find confusing. A distributed system is a general term which refers to a network of independent computers that form a coherent system. A microservices architecture, on the other hand, is a software development technique for building a software system that &lt;em&gt;runs on a distributed system&lt;/em&gt;. This kind of architecture encourages small services with lightweight, easy-to-use communication protocols like HTTP/S and RPC.&lt;/p&gt;

&lt;p&gt;Building a microservices architecture implies utilizing a distributed system&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. This is &lt;em&gt;not&lt;/em&gt; an implication to be taken lightly. The foundation of a distributed system has several key fallacies that must be understood in order to build a reliable system!&lt;/p&gt;

&lt;h3 id=&#34;fallacies&#34;&gt;Fallacies&lt;/h3&gt;

&lt;p&gt;L. Peter Deutsch and others at Sun Microservices stated eight false assumptions that new programmers often have regarding distributed systems:&lt;/p&gt;

&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;The network is reliable.&lt;/li&gt;
&lt;li&gt;Latency is zero.&lt;/li&gt;
&lt;li&gt;Bandwidth is infinite.&lt;/li&gt;
&lt;li&gt;The network is secure.&lt;/li&gt;
&lt;li&gt;Topology doesn&amp;rsquo;t change.&lt;/li&gt;
&lt;li&gt;There is one administrator.&lt;/li&gt;
&lt;li&gt;Transport cost is zero.&lt;/li&gt;
&lt;li&gt;The network is homogeneous.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;never-assume-the-network-is-reliable&#34;&gt;Never assume the network is reliable&lt;/h4&gt;

&lt;p&gt;When writing code that calls an external service, remember to handle failure scenarios. What happens if your request never makes it to the other service? Will you retry, propagate the failure upwards, log an error, or do nothing? If you choose to retry, at what rate will you retry and for how long? What if your request makes it to the external service and is processed but the response never makes it back to you?&lt;/p&gt;

&lt;p&gt;When a system is a traditional monolith, the external service is just another part of the monolith so you’re making a function call, not a network call; if you’re able to make the request, the other component is able to respond. Failure modes are more limited.&lt;/p&gt;

&lt;h4 id=&#34;network-latency-is-not-zero&#34;&gt;Network latency is not zero&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Inter-service calls over a network have a higher cost in terms of network latency and message processing time than in-process calls within a monolithic service process.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Although it takes a measurable amount of time to make a function call, it’s so minimal that for most purposes it can be considered zero. A network call, on the other hand, will take a nontrivial amount of time (maybe 2 ms).&lt;/p&gt;

&lt;p&gt;When moving to microservices, it’s important to be mindful when crossing service boundaries. Perhaps your algorithm used to make a few thousand function calls in a monolith. For MSA, the system was split into services such that your function calls become network calls. This does not impact the Big-O runtime of the algorithm but it does change the constant! Could the result of the call be cached? Could the number of calls be reduced?&lt;/p&gt;

&lt;h4 id=&#34;systems-need-to-handle-topology-changes-gracefully&#34;&gt;Systems need to handle topology changes gracefully&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Network topology is the arrangement of the elements (links, nodes, etc.) of a communication network.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A given microservice could have the topology of a cluster of identical nodes. The service is running (&amp;ldquo;alive&amp;rdquo;, &amp;ldquo;healthy&amp;rdquo;) when at least one of these nodes is running. If a caller is too strongly connected to the IP address of a particular node in the service, it will be extremely susceptible to a topology change that removes that node from the cluster.&lt;/p&gt;

&lt;p&gt;Instead, a tool like &lt;a href=&#34;https://www.consul.io/&#34;&gt;Consul&lt;/a&gt; can provide DNS service discovery that abstracts the underlying IP addresses of a cluster and allows the service to be discovered via a host-agnostic address like &lt;code&gt;{service name}.service.consul&lt;/code&gt;. Making requests to a service through this address allows the underlying topology to change without impacting the callers.&lt;/p&gt;

&lt;h3 id=&#34;change-of-mindset&#34;&gt;Change of mindset&lt;/h3&gt;

&lt;p&gt;Working with distributed systems requires a change of mindset. Most of us learned how to program by writing simple command-line applications. Perhaps your first program was the iconic script that printed the words “Hello, world” to the console. Then you progressed to programs that could read in a file, make some changes, and spit out another file. With time, you developed a mental model of how code executes with the simplified assumptions that can be made in a &lt;strong&gt;single computer environment&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Once a system of computers must solve a problem &lt;em&gt;in a coordinated manner&lt;/em&gt;, the assumptions we previously could make turn into misconceptions. Communicating with another computer is fundamentally different; we must retrain our mental models to account for this. Some developers do not work within a distributed system until after graduation from college, which means that they&amp;rsquo;re simultaneously adapting to full-time work &lt;em&gt;and&lt;/em&gt; grappling with the need for a new mental model to understand distributed computing.&lt;/p&gt;

&lt;h2 id=&#34;challenges-of-a-microservices-architecture&#34;&gt;Challenges of a microservices architecture&lt;/h2&gt;

&lt;p&gt;Here are the primary challenges related to microservices which I have experienced in practice.&lt;/p&gt;

&lt;h3 id=&#34;complexity-and-cognitive-load&#34;&gt;Complexity and cognitive load&lt;/h3&gt;

&lt;p&gt;The first few microservices which are built will likely require modernizations to the infrastructure to handle problems like service discovery and independent deployability. These improvements, though difficult, push the architecture in the right direction. Often, the first services which are implemented are carefully deliberated and their need is clear. An example of this from my company was a well-placed reverse proxy cache for a monolithic service. It was a clear and impressive win for our system&amp;rsquo;s scalability.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/microservices-reverse-proxy-cache.png&#34; width=&#34;100%&#34; alt=&#34;Reverse Proxy Cache&#34; /&gt;&lt;/p&gt;

&lt;p&gt;As more microservices are added, however, &lt;strong&gt;the entanglement begins&lt;/strong&gt;, raising the cognitive load required to understand the details of how the system really works. The flow of requests through the system is challenging and convoluted.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/microservices-entanglement.png&#34; width=&#34;100%&#34; alt=&#34;Entanglement of Microservices&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The need for orchestration, service-to-service software load balancing, and improved fault tolerance becomes evident. The service mesh pattern is one response to the growing complexity of operating microservices at scale. This pattern places a layer of abstraction between a service and the network that presents a more idealized view. For example, instead of all applications handling their own retry logic, the service mesh layer can implement retries with exponential backoff&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; by default.&lt;/p&gt;

&lt;h3 id=&#34;nanoservices&#34;&gt;Nanoservices&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Too-fine-grained microservices have been criticized as an anti-pattern, dubbed a nanoservice by Arnon Rotem-Gal-Oz.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;How small is too small? How big is too big? It&amp;rsquo;s hard to get the size of a microservice right. Sometimes in the excitement of breaking up a system, developers go too far and end up building a mess of nanoservices which suffer from a massive amount of overhead.&lt;/p&gt;

&lt;h3 id=&#34;service-boundaries-and-coordinating-efforts&#34;&gt;Service boundaries and coordinating efforts&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Dividing the backend into 8 separate services followed by a decision to assign services to people enforced ownership of specific services by developers. This led to developers complaining of their service being blocked by tasks on other services and refusing to help out by working with these blocking tasks. The separation also lead to developers losing sight of the overarching system goals, instead only focusing on the service they were working on.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It&amp;rsquo;s true that the codebases of microservices are easier to fully understand. It&amp;rsquo;s possible for a single engineer to keep all the details in his or her head, leading to safer changes. That said, when service boundaries cross teams, it&amp;rsquo;s easy to make mistakes.&lt;/p&gt;

&lt;p&gt;Deployments sometimes must be coordinated. Imagine that service A owned by one team wants to expose a new API that will be used by another team&amp;rsquo;s service B. The fact that service A&amp;rsquo;s deployment had to be rolled back is not communicated to the other team and they proceed with their release, causing all requests to fail which rely on the new APIs. Putting a strong emphasis on backwards compatibility can help these situations. In a monolithic architecture, the deployment was all or nothing, so either the new APIs were released &lt;em&gt;and&lt;/em&gt; used, or neither, removing the need for coordinated deployments.&lt;/p&gt;

&lt;h3 id=&#34;duplicated-common-functionality&#34;&gt;Duplicated common functionality&lt;/h3&gt;

&lt;p&gt;Each microservices requires much of the same functionality, which requires all developers to have at least some understanding of things like logging, emitting metrics, creating dashboards, and communicating with other services. While some microservices will nail these aspects, others will have problems, and still others will be missing them entirely. In a monolith, the logging infrastructure only has to be set up once and all components can take advantage of it. This also means that there is a great deal of duplication among microservices, though this can be mitigated in part through shared libraries and gateway layers which provide common functionality.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/microservices-gateway-pattern.png&#34; width=&#34;100%&#34; alt=&#34;API Gateway&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;benefits-of-microservices&#34;&gt;Benefits of microservices&lt;/h2&gt;

&lt;p&gt;This blog post has admittedly had a cautionary tone. I covered the fallacies of distributed systems and many of the challenges of an MSA. So what are the benefits of microservices that have motivated its strong adoption?&lt;/p&gt;

&lt;h3 id=&#34;conway-s-law&#34;&gt;Conway&amp;rsquo;s Law&lt;/h3&gt;

&lt;p&gt;A monolith can make sense for a company with a small engineering team. Once the number of developers increases, however, the monolith becomes unwieldy, difficult (or impossible) to fully understand, and diffused in ownership. Conway’s Law&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:7&#34;&gt;&lt;a href=&#34;#fn:7&#34;&gt;7&lt;/a&gt;&lt;/sup&gt; simply states that a company’s architecture will mimic the way teams are structured. So as new engineers are hired and teams split or are moved to another office, the architecture naturally evolves as well. Sometimes the monolith refutes this natural evolution and fights against Conway’s Law, leading to an engineering culture that despises the monolith.&lt;/p&gt;

&lt;p&gt;Microservices tend to more easily conform to the organization of an engineering team. Give some to one team, a few others to another team, and so on (hopefully these decisions around ownership are taken more seriously than this sentence implied). How do you split up ownership of a monolith? You can’t really, which is why it will erode without invested engineers.&lt;/p&gt;

&lt;h3 id=&#34;independent-scalability-and-deployability&#34;&gt;Independent scalability and deployability&lt;/h3&gt;

&lt;p&gt;Once a large, monolithic system has been broken into services, it becomes clear which ones require more capacity and which demand very little. The services can then be scaled appropriately. It&amp;rsquo;s also possible at this point to more easily identify bottlenecks and opportunities for optimization.&lt;/p&gt;

&lt;p&gt;Deployment becomes decentralized and individual teams must begin to take ownership of their entire deploy pipeline as it&amp;rsquo;s no longer feasible to ask a single team to handle all deployments. I view the possibility to eliminate the &amp;ldquo;throw code over the wall&amp;rdquo; mentality as a major step forward for any engineering team: developers tend to write better code when they own it from end to end, never expecting someone else to test their code or find their memory leaks.&lt;/p&gt;

&lt;h3 id=&#34;potential-for-loose-coupling&#34;&gt;Potential for loose coupling&lt;/h3&gt;

&lt;p&gt;While it doesn’t come for free, an MSA encourages loose coupling between services. It only takes a few coordinated deployments to stay motivated in this regard! One point of strong coupling common in a monolithic system is shared databases. Adopting microservices is a natural time to avoid perpetuating this pattern and therefore decrease coupling. Queues and other asynchronous workflows can also help tremendously.&lt;/p&gt;

&lt;h2 id=&#34;conclusion-are-we-making-a-huge-mistake&#34;&gt;Conclusion: Are We Making a Huge Mistake?&lt;/h2&gt;

&lt;p&gt;In conclusion, I do not believe that we as an industry are making a huge mistake in adopting microservices. Microservices clearly solve critical software development problems, yet also  present their own challenges and are not a silver bullet by any means. Best practices like service meshes and gateways help mitigate the weaker points of microservices, leading to a much improved architecture overall.&lt;/p&gt;

&lt;h2 id=&#34;further-reading&#34;&gt;Further Reading&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://backendology.com/2018/07/30/top-software-books/&#34;&gt;10 books for new software engineers&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Designing Data-Intensive Applications&lt;/li&gt;
&lt;li&gt;Building Microservices&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;https://www.infoq.com/news/2016/09/microservices-distributed-system&#34;&gt;https://www.infoq.com/news/2016/09/microservices-distributed-system&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing&#34;&gt;https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Microservices&#34;&gt;https://en.wikipedia.org/wiki/Microservices&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Network_topology&#34;&gt;https://en.wikipedia.org/wiki/Network_topology&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Exponential_backoff&#34;&gt;https://en.wikipedia.org/wiki/Exponential_backoff&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6&#34;&gt;&lt;a href=&#34;https://www.infoq.com/news/2014/08/failing-microservices&#34;&gt;https://www.infoq.com/news/2014/08/failing-microservices&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:7&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Conway%27s_law&#34;&gt;https://en.wikipedia.org/wiki/Conway%27s_law&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:7&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
        </item>
      
    
      
        <item>
          <title>My Experience Using Hugo</title>
          <link>https://backendology.com/2018/08/13/experience-using-hugo/</link>
          <pubDate>Mon, 13 Aug 2018 00:00:00 UTC</pubDate>
          <author>Jared Ririe</author>
          <guid>https://backendology.com/2018/08/13/experience-using-hugo/</guid>
          <description>

&lt;p&gt;As my blog is still in its infancy, I have been exploring various blogging platforms and tools to find the ones that I would like to use moving forward. This post introduces Hugo, considers its alternatives, and walks through an example of setting up a Hugo blog and publishing a post.&lt;/p&gt;

&lt;h2 id=&#34;what-is-hugo&#34;&gt;What is Hugo?&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/hugo.png&#34; width=&#34;100%&#34; alt=&#34;Hugo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; is an open-source static site generator known for its performance and flexibility. Hugo was initially released in 2013 and has quickly grown in popularity. It is written in Go which is what pushed me to give it a shot.&lt;/p&gt;

&lt;p&gt;Static sites take the content (usually markdown in the case of blogs) and apply it to layouts or templates, ultimately generating static HTML files that can be served to the user. They make a lot of sense for websites like blogs that don&amp;rsquo;t offer a dynamic experience that requires custom JavaScript to run on the user&amp;rsquo;s web browser. As the HTML is served directly, static sites are highly performant and more secure.&lt;/p&gt;

&lt;h3 id=&#34;alternatives-to-hugo&#34;&gt;Alternatives to Hugo&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at some alternatives to Hugo which will help us learn more about it and help us make a better decision.&lt;/p&gt;

&lt;h4 id=&#34;wordpress&#34;&gt;Wordpress&lt;/h4&gt;

&lt;p&gt;Wordpress is a fully-featured and proven website creation platform. It has everything you need to write a blog, including plenty of free themes, plugins to share your new posts via social media providers (and automatically send an email version of your post to those who subscribe), and usable (but not great) markdown support. The websites it produces are &lt;em&gt;not&lt;/em&gt; static sites which makes Wordpress a common target for malicious attacks.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s worth noting here that &lt;a href=&#34;https://wordpress.com/&#34;&gt;wordpress.com&lt;/a&gt; is different from &lt;a href=&#34;https://wordpress.org/&#34;&gt;wordpress.org&lt;/a&gt;. This confused me at first! wordpress.com is a solution built on top of the open source software which is Wordpress (wordpress.org). wordpress.com offers things like free and paid hosting options and a simpler GUI for writing posts.&lt;/p&gt;

&lt;p&gt;When I first started writing this blog, I chose to host my site under a free wordpress.com subdomain&amp;ndash;this removed the barrier to start blogging in terms of both effort and cost. I was still settling on a name for my blog anyway, so I didn&amp;rsquo;t want to pay for a domain quite yet. If I choose Wordpress over Hugo going forward, I will use the open source version directly and buy my own domain. The conveniences offered by wordpress.com are not valuable enough to me for their relatively high cost.&lt;/p&gt;

&lt;p&gt;Wordpress has some clear disadvantages in my mind. Foremost, its target audience is not a software engineer who thinks some of the challenges of blogging might be fun to solve as a form of side project. Because it&amp;rsquo;s so fully featured, there aren&amp;rsquo;t that many problems left to solve. I think someone who doesn&amp;rsquo;t write software might find it strange I&amp;rsquo;m listing this as a negative! Perhaps fellow developers will agree that it would be fun to learn how to integrate with a commenting system or learn the Twitter API well enough to update followers of new posts.&lt;/p&gt;

&lt;p&gt;Even as I write this, though, I recognize that needing to solve these problems will slow me down from getting content to users. There are arguments on both sides which make it a tough call!&lt;/p&gt;

&lt;h4 id=&#34;jekyll&#34;&gt;Jekyll&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; was started by GitHub’s founder Tom Preston-Werner in 2008. It is more directly comparable to Hugo as it&amp;rsquo;s primarily a static site generator, not a full blogging solution. In fact, Jekyll is the software that started the current excitement around static site generation.&lt;/p&gt;

&lt;p&gt;As Jekyll installs as a RubyGem, it does require that you install and configure a Ruby environment on your computer. I did not already have everything set up for Ruby, so it was a bit of a hassle to get the &lt;code&gt;jekyll&lt;/code&gt; command to work. The set up for Hugo was a breeze in comparison as Brew just downloaded the Go binary that was immediately runnable. While I have Go installed for other reasons, this is unnecessary.&lt;/p&gt;

&lt;p&gt;Jekyll has been around longer than Hugo (2008 vs. 2013) and therefore is known to be more extensible through plugins. Hugo is still under heavy development, so new features are being added all the time. When I added Google Analytics to my site, for example, some guides showed how to do it manually but then newer ones pointed out built-in support.&lt;/p&gt;

&lt;p&gt;Hugo is the clear winner in terms of the speed of static site generation.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; This is noticeable when you&amp;rsquo;re actively changing the site&amp;rsquo;s contents and Hugo is able to easily keep up with your changes in real time. Jekyll also supports live reload like this, but some files require a full rebuild (such as the changes to the config). Hugo does not have this limitation.&lt;/p&gt;

&lt;h2 id=&#34;setting-up-a-simple-blog-with-hugo&#34;&gt;Setting up a simple blog with Hugo&lt;/h2&gt;

&lt;p&gt;Without further ado, let&amp;rsquo;s jump into a real world example of using Hugo (my blog!). You could follow these steps to learn how to make a simple blog generated with Hugo. Most of this content is adapted from &lt;a href=&#34;https://gohugo.io/hosting-and-deployment/hosting-on-github/&#34;&gt;this tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;install-hugo&#34;&gt;Install Hugo&lt;/h3&gt;

&lt;p&gt;Install Hugo by following the steps outlined &lt;a href=&#34;https://gohugo.io/getting-started/installing/&#34;&gt;here&lt;/a&gt;. On a Mac, it is as simple as &lt;code&gt;brew install hugo&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;create-github-repositories-and-submodule&#34;&gt;Create GitHub repositories and submodule&lt;/h3&gt;

&lt;p&gt;GitHub is a great way to store the contents of your blog to keep it under version control. Several of the guides I followed recommended that you make two repositories, one for the site and another for the generated site that will actually be hosted.&lt;/p&gt;

&lt;p&gt;Make the first repository for the content of the blog with any name you prefer. I chose &lt;code&gt;backendology&lt;/code&gt;. (&lt;a href=&#34;https://github.com/jaredririe/backendology&#34;&gt;github.com/jaredririe/backendology&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Now, make the second repository named &lt;code&gt;&amp;lt;username&amp;gt;.github.io&lt;/code&gt; for the generated site: (&lt;a href=&#34;https://github.com/jaredririe/jaredririe.github.io&#34;&gt;github.com/jaredririe/jaredririe.github.io&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;With both repositories in place, run this command to make the &lt;code&gt;public&lt;/code&gt; directory a submodule for the second repository.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Submodules allow you to keep a Git repository as a subdirectory of another Git repository. This lets you clone another repository into your project and keep your commits separate.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git submodule add -b master https://github.com/&amp;lt;username&amp;gt;/&amp;lt;username&amp;gt;.github.io.git public&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To make it easy to generate your site and push changes to the second repository, write a script like the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
echo -e &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;\033[0;32mDeploying updates to GitHub...\033[0m&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Generate the static site in the default /public folder.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;hugo

&lt;span style=&#34;color:#75715e&#34;&gt;# Add changes to the git submodule.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;cd public
git add .

&lt;span style=&#34;color:#75715e&#34;&gt;# Commit changes.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;msg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Rebuilding site on `date`&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;[&lt;/span&gt; $# -eq &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;]&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt; msg&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;fi&lt;/span&gt;
git commit -m &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;$msg&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#75715e&#34;&gt;# Push changes to origin.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;git push origin master

&lt;span style=&#34;color:#75715e&#34;&gt;# Come back up to the project&amp;#39;s root.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;cd ..&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The script runs the &lt;code&gt;hugo&lt;/code&gt; command which by default overwrites the public directory. It pushes the changes to GitHub with a default message or the one specified as an argument to the script.&lt;/p&gt;

&lt;h3 id=&#34;copy-someone-else-s-repository-using-hugo&#34;&gt;Copy someone else&amp;rsquo;s repository using Hugo&lt;/h3&gt;

&lt;p&gt;Rather than starting from an empty repo, I recommend copying someone else&amp;rsquo;s who is using Hugo, getting it to work, and then modifying and customizing it as you see fit. Feel free to fork &lt;a href=&#34;https://github.com/jaredririe/backendology&#34;&gt;my GitHub repo&lt;/a&gt; for this purpose.&lt;/p&gt;

&lt;h3 id=&#34;enable-github-pages&#34;&gt;Enable GitHub Pages&lt;/h3&gt;

&lt;p&gt;This option is found in the GitHub settings under &amp;ldquo;GitHub Pages&amp;rdquo; on the repository for the generated site.&lt;/p&gt;

&lt;h2 id=&#34;deploying-my-hugo-site-to-production&#34;&gt;Deploying my Hugo site to &amp;ldquo;production&amp;rdquo;&lt;/h2&gt;

&lt;p&gt;To illustrate my workflow for deploying my site, let&amp;rsquo;s follow a post from draft to finished product.&lt;/p&gt;

&lt;h3 id=&#34;1-write-a-draft&#34;&gt;1. Write a draft&lt;/h3&gt;

&lt;p&gt;Begin a post as a draft in markdown. I store these in a separate directory (&lt;code&gt;drafts/&lt;/code&gt;). Once I&amp;rsquo;m happy with what I have written, I move the file into a finished directory (&lt;code&gt;finished&lt;/code&gt;/).&lt;/p&gt;

&lt;h3 id=&#34;2-publish-the-post&#34;&gt;2. Publish the post&lt;/h3&gt;

&lt;p&gt;I consider publishing to be the step which turns a post you are finished writing into one that is ready for Hugo. One could choose to write posts directly in this Hugo format, but I chose not to for a few reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I include a notes section at the bottom of my posts that&amp;rsquo;s intended to be used for research while writing the post, not for the users reading my blog. I could just manually delete it, but I might find the raw content or quotes to be useful at some later point.&lt;/li&gt;
&lt;li&gt;Hugo expects the post to be named according to its publish date (e.g. &lt;code&gt;2018-07-23-database-indexes.md&lt;/code&gt;) but I don&amp;rsquo;t know that information until I&amp;rsquo;m done writing.&lt;/li&gt;
&lt;li&gt;Each post includes &amp;ldquo;front matter&amp;rdquo; (a few lines of JSON/YAML/TOML at the top of the markdown) that I think is better to automatically generate:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;---
title: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;Breaking Down Abstractions: Database Indexes&amp;#39;&lt;/span&gt;
featured_image: /public/images/b+-tree.png
author: Jared Ririe
categories: Breaking Abstractions
tags:
- databases
- sql
- nosql
- data-structures
date: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2018-07-23&amp;#34;&lt;/span&gt;
slug: database-indexes
---&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If I wrote the front matter directly, I could accidentally make a typo when assigning the category which would have the effect of making a new category. With my categories and tags defined in code, it&amp;rsquo;s easy to find ones I&amp;rsquo;ve previously used through auto-completion. I keep track of my categories in a Go struct:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;categoryType&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;category&lt;/span&gt; = &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;Personal&lt;/span&gt;             &lt;span style=&#34;color:#a6e22e&#34;&gt;categoryType&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;General&lt;/span&gt;              &lt;span style=&#34;color:#a6e22e&#34;&gt;categoryType&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;BreakingAbstractions&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;categoryType&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;Books&lt;/span&gt;                &lt;span style=&#34;color:#a6e22e&#34;&gt;categoryType&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;Golang&lt;/span&gt;               &lt;span style=&#34;color:#a6e22e&#34;&gt;categoryType&lt;/span&gt;
    &lt;span style=&#34;color:#a6e22e&#34;&gt;Research&lt;/span&gt;             &lt;span style=&#34;color:#a6e22e&#34;&gt;categoryType&lt;/span&gt;
}{
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Personal&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;General&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Breaking Abstractions&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Books&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Golang&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Research&amp;#34;&lt;/span&gt;,
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jaredririe/backendology/tree/master/publish&#34;&gt;Here&lt;/a&gt; is the Go code I use to publish a post. It makes a copy of the post in the &lt;code&gt;finished/&lt;/code&gt; directory, makes the changes described (strips off the notes, renames the file, and adds front matter) and writes to &lt;code&gt;content/post&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;3-generate-the-site-locally&#34;&gt;3. Generate the site locally&lt;/h3&gt;

&lt;p&gt;Run the command &lt;code&gt;hugo server&lt;/code&gt; to start up a server running at localhost:1313. Take a look at the new post: Did the markdown render as you expected? Are the images displaying correctly?&lt;/p&gt;

&lt;h3 id=&#34;4-run-the-deploy-script&#34;&gt;4. Run the deploy script&lt;/h3&gt;

&lt;p&gt;Once you&amp;rsquo;re happy, run the deploy script mentioned in the initial setup to push your changes to production. Within a few minutes, your site should be deployed to &lt;code&gt;https://&amp;lt;username&amp;gt;.github.io/&lt;/code&gt; or a custom domain (if you configured it this way).&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:2&#34;&gt;&lt;a href=&#34;https://forestry.io/blog/hugo-vs-jekyll-benchmark/&#34;&gt;https://forestry.io/blog/hugo-vs-jekyll-benchmark/&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Tools-Submodules&#34;&gt;https://git-scm.com/book/en/v2/Git-Tools-Submodules&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Lessons From Adopting Go at Qualtrics</title>
          <link>https://backendology.com/2018/08/06/lessons-from-adopting-go-qualtrics/</link>
          <pubDate>Mon, 06 Aug 2018 00:00:00 UTC</pubDate>
          <author>Jared Ririe</author>
          <guid>https://backendology.com/2018/08/06/lessons-from-adopting-go-qualtrics/</guid>
          <description>

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/utgo-qualtrics.png&#34; width=&#34;100%&#34; alt=&#34;UTGO + Qualtrics&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Back in September 2017, I teamed up with a coworker to give a presentation for the &lt;a href=&#34;http://utahgolang.com/&#34;&gt;Utah Golang User Group&lt;/a&gt;. We chose to share the lessons we had learned as we adopted and scaled Go as one of the core programming languages at Qualtrics. Our intended audience was companies and developers who were interested in trying out Go and increasing its use within an organization. Many companies are considering Go because its popularity has only continued to rise (for good reason), so I&amp;rsquo;m excited to repost this content via my blog.&lt;/p&gt;

&lt;h2 id=&#34;summary-of-the-content&#34;&gt;Summary of the content&lt;/h2&gt;

&lt;p&gt;Here is a summary of the content of our presentation which will serve as a teaser of the slides and video below:&lt;/p&gt;

&lt;h3 id=&#34;context-context-day-in-the-life-of-a-qualtrics-engineer&#34;&gt;&lt;code&gt;context.Context&lt;/code&gt; Day in the life of a Qualtrics engineer&lt;/h3&gt;

&lt;p&gt;There were key software development life cycle (SDLC) problems at Qualtrics that started pushing us towards significant changes in our architecture. We adopted Docker and Consul and wrote our first microservices in Node.js.&lt;/p&gt;

&lt;h3 id=&#34;reflect-value-how-why-go-works-for-us&#34;&gt;&lt;code&gt;reflect.Value&lt;/code&gt; How/why Go works for us&lt;/h3&gt;

&lt;p&gt;Adopting microservices solved many problems, such as decreasing the size of our codebases and enabling clear assignment of ownership. Some problems remained, however, which is what encouraged us to try Go, a language we knew was proven for microservices.&lt;/p&gt;

&lt;h3 id=&#34;func-main-getting-the-initial-buy-in&#34;&gt;&lt;code&gt;func main()&lt;/code&gt; Getting the initial buy-in&lt;/h3&gt;

&lt;p&gt;Convincing an organization to adopt a new programming language is challenging. This is what worked for us:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Learn Go well enough to sell it (perhaps through side projects outside of work)&lt;/li&gt;
&lt;li&gt;Start with something small&lt;/li&gt;
&lt;li&gt;Stand up a Go service that compares favorably to a service it replaces&lt;/li&gt;
&lt;li&gt;Attain manager buy-in&lt;/li&gt;
&lt;li&gt;Deploy a real service into production&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;go-build-scale-process-of-driving-go-adoption-among-engineers&#34;&gt;&lt;code&gt;go build &amp;amp;&amp;amp; ./scale&lt;/code&gt; Process of driving Go adoption among engineers&lt;/h3&gt;

&lt;p&gt;Once you managed to get your initial service in production, how do you continue the momentum? We focused on lowering the learning barrier for the base case, helping developers get started and be productive in Go as quickly as possible. We did this by providing getting-started documentation, educating developers through trainings, and building tools and libraries which addressed common needs.&lt;/p&gt;

&lt;h3 id=&#34;if-err-nil-things-we-wish-we-knew-things-we-d-do-differently&#34;&gt;&lt;code&gt;if err != nil&lt;/code&gt; Things we wish we knew / things we’d do differently&lt;/h3&gt;

&lt;p&gt;We wish we would known how long it can take to garner interest around a new language&amp;ndash;it took nearly a year to expand the number of Go developers to more than one. Also, in building shared libraries, we focused too much on libraries that would be useful to our work rather than core functionality needed by engineering at large.&lt;/p&gt;

&lt;h3 id=&#34;wg-wait-ideas-for-future-work&#34;&gt;&lt;code&gt;wg.Wait()&lt;/code&gt; Ideas for future work&lt;/h3&gt;

&lt;p&gt;To continue to scale Go at Qualtrics, we&amp;rsquo;d like to augment our documentation with tutorial-style guides and provide more specific training. It would also be great to offer some form of tailored service template that other developers could use as a starting point for their Go projects.&lt;/p&gt;

&lt;h2 id=&#34;presentation-slides-and-recording&#34;&gt;Presentation slides and recording&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/18JiufQTTm8GxFRb2uyg2C8RHmm5NbtWU9Se7vBtwkUY/edit?usp=sharing&#34;&gt;Here are the slides&lt;/a&gt; we created for the presentation. We retroactively fleshed out the notes section to help the slides stand alone without the presentation. If you prefer the original video, however, the user group recorded our presentation and put together &lt;a href=&#34;https://www.youtube.com/watch?v=8wmEL0JwHQA&amp;amp;feature=youtu.be&#34;&gt;this Youtube video&lt;/a&gt;.&lt;/p&gt;

&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/8wmEL0JwHQA&#34; frameborder=&#34;0&#34; allow=&#34;autoplay; encrypted-media&#34; allowfullscreen&gt;&lt;/iframe&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Top 10 Books for New Software Engineers</title>
          <link>https://backendology.com/2018/07/30/top-software-books/</link>
          <pubDate>Mon, 30 Jul 2018 00:00:00 UTC</pubDate>
          <author>Jared Ririe</author>
          <guid>https://backendology.com/2018/07/30/top-software-books/</guid>
          <description>

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/top-software-books.jpg&#34; width=&#34;100%&#34; alt=&#34;Top three software books&#34; /&gt;&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m excited to share my top ten list of books new Software Engineers should invest in reading! These books have proved foundational in helping me transition from student to developer and deepen my skills.&lt;/p&gt;

&lt;p&gt;First, a disclaimer: there are some great books missing from this list because I haven&amp;rsquo;t read them yet. I want this list to be as authentic as possible and therefore I will not recommend a book until I&amp;rsquo;ve read it cover to cover. If you have read an impressive book that you think deserves a spot on this list, comment and I will check it out!&lt;/p&gt;

&lt;h2 id=&#34;top-ten&#34;&gt;Top Ten&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#10-the-master-algorithm&#34;&gt;The Master Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#9-the-pragmatic-programmer&#34;&gt;The Pragmatic Programmer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#8-eloquent-javascript&#34;&gt;Eloquent JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#7-go-in-practice&#34;&gt;Go In Practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#6-cracking-the-coding-interview&#34;&gt;Cracking the Coding Interview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5-the-complete-software-developers-career-guide&#34;&gt;The Complete Software Developer&amp;rsquo;s Career Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4-clean-architecture&#34;&gt;Clean Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-building-microservices&#34;&gt;Building Microservices&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-nosql-distilled&#34;&gt;NoSQL Distilled&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#1-designing-data-intensive-applications&#34;&gt;Designing Data-Intensive Applications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;10-the-master-algorithm&#34;&gt;10. &lt;a href=&#34;https://www.amazon.com/gp/product/0465094279/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0465094279&amp;amp;linkCode=as2&amp;amp;tag=jaredririeblo-20&amp;amp;linkId=b298988a7eb225433e4447285d456a84&#34;&gt;&lt;em&gt;The Master Algorithm&lt;/em&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;The Master Algorithm&lt;/em&gt; is a high-level introduction of both the history and latest advances within Machine Learning. While you may not be a data scientist or particularly passionate about this area of Computer Science, it&amp;rsquo;s becoming increasingly important to have at least a cursory understanding of Machine Learning. This book fills this need of providing exposure without dragging the reader into the deep end; that said, it&amp;rsquo;s definitely a technical and challenging book.&lt;/p&gt;

&lt;h3 id=&#34;9-the-pragmatic-programmer&#34;&gt;9. &lt;a href=&#34;https://www.amazon.com/gp/product/020161622X/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=020161622X&amp;amp;linkCode=as2&amp;amp;tag=jaredririeblo-20&amp;amp;linkId=8a65d8f4a0151dade8e2a2f3294909c3&#34;&gt;&lt;em&gt;The Pragmatic Programmer&lt;/em&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;While &lt;em&gt;The Pragmatic Programmer&lt;/em&gt; is a bit dated in parts, it remains a classic software book that every developer should read. It is the original source of many best practices that have been shared by word of mouth through the years. As the book progresses, many memorable pragmatic tips are shared. These are some of my favorites:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Care about your craft

&lt;ul&gt;
&lt;li&gt;If you are serious about a software career, you should care about the quality of the work you produce&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Think about your work

&lt;ul&gt;
&lt;li&gt;Constantly critique your work&lt;/li&gt;
&lt;li&gt;Disable auto pilot&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t live with broken windows

&lt;ul&gt;
&lt;li&gt;Fix bad design and code as soon as you notice it&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Use tracer bullets to find the target

&lt;ul&gt;
&lt;li&gt;Get a simplistic end-to-end solution working first so you know you’re on track&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Prototype to learn

&lt;ul&gt;
&lt;li&gt;The purpose of prototyping is to learn, not to produce code for the final product&lt;/li&gt;
&lt;li&gt;Prototyping is different from using tracer bullets&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Use a single editor well

&lt;ul&gt;
&lt;li&gt;Learn keyboard shortcuts&lt;/li&gt;
&lt;li&gt;Program and extend your editor to make it your own&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&amp;ldquo;select&amp;rdquo; isn&amp;rsquo;t broken

&lt;ul&gt;
&lt;li&gt;When debugging, remember that the OS, compiler, or standard library are rarely the problem. It’s your code that’s broken&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Refactor early, refactor often&lt;/li&gt;
&lt;li&gt;Test your software, or your users will&lt;/li&gt;
&lt;li&gt;Find bugs once

&lt;ul&gt;
&lt;li&gt;Once you have identified a bug, ensure through regression testing that the bug will never crop up again&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Build documentation in, don&amp;rsquo;t bolt it on

&lt;ul&gt;
&lt;li&gt;Documentation that is part of the code is more likely to be kept up to date&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One part of the book that has stayed with me is the analogy of the woodworker. For woodworkers, the primary material of their work is wood and as such, they become intimately familiar with wood and the tools used to manipulate wood. The correlating material for a developer is text. Some of our tools include editors, IDEs, and terminals. Just like the woodworker, we need to become familiar with text and the tools that manipulate it. It’s pragmatic to learn keyboard shortcuts and automations. It’s wise to know one editor and terminal extremely well. It surprises me how many programmers don’t know simple shortcuts like &lt;code&gt;alt + left/right arrow&lt;/code&gt; to move the cursor in increments of words rather than characters! Common editor features like &lt;a href=&#34;https://www.youtube.com/watch?v=czQipWJA8EU&#34;&gt;multi-cursor select&lt;/a&gt; elude many, yet I don’t know what I would do without it–I find at least one application of this feature every day. It has uses for many things outside of renaming a variable in code.&lt;/p&gt;

&lt;h3 id=&#34;8-eloquent-javascript&#34;&gt;8. &lt;em&gt;Eloquent JavaScript&lt;/em&gt; (&lt;a href=&#34;https://www.amazon.com/gp/product/1593279507/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1593279507&amp;amp;linkCode=as2&amp;amp;tag=jaredririeblo-20&amp;amp;linkId=067d30460a755446e9ce867a129f1bc2&#34;&gt;Print&lt;/a&gt;, &lt;a href=&#34;http://eloquentjavascript.net/&#34;&gt;Free Online Version&lt;/a&gt;)&lt;/h3&gt;

&lt;p&gt;This is one of those programming language books that teaches a lot about programming in general, not just a particular language. For example, the &lt;a href=&#34;http://eloquentjavascript.net/07_robot.html&#34;&gt;Robot path-finding project chapter&lt;/a&gt; piqued my interest in depth-first and breadth-first search for the first time since college. I also appreciated the author&amp;rsquo;s focus on composable, eloquent code that pushed me to write better code.&lt;/p&gt;

&lt;p&gt;One oddity to be aware of is that chapter 1 of this book gives the impression that it&amp;rsquo;s beginner-focused; the author includes detailed analogies to help explain variables, for example. A few chapters later, though, you cover techniques used in functional programming. My recommendation is to skim through the early sections and then slow down as it quickly becomes a challenging read. The author applies rigor to a language that would never be described as rigorous.&lt;/p&gt;

&lt;p&gt;The third edition of this book came out recently with thorough updates; all the code has been updated to ES6, helping the content feel more like the &amp;ldquo;Modern JavaScript&amp;rdquo; programmers are likely to encounter in the wild. The runnable code snippets in the online version were very helpful in interacting with the content.&lt;/p&gt;

&lt;h3 id=&#34;7-go-in-practice&#34;&gt;7. &lt;a href=&#34;https://www.amazon.com/gp/product/1633430073/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1633430073&amp;amp;linkCode=as2&amp;amp;tag=jaredririeblo-20&amp;amp;linkId=52b8b21a37be43441f712179120814d0&#34;&gt;&lt;em&gt;Go In Practice&lt;/em&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;While the space for books about the Go programming language is growing, it&amp;rsquo;s particularly thin when it comes to books geared towards intermediate to advanced developers. &lt;em&gt;Go In Practice&lt;/em&gt; is for an intermediate audience and it did a decent job of exposing me to some new techniques that I was not familiar with. The pattern of showing a problem you might run into, talking through various solutions, and ending up with a generally applicable technique is used throughout the book; I found it instructive.&lt;/p&gt;

&lt;p&gt;The section on concurrency was particularly detailed compared to what I had read previously. I also learned a great deal about panics in Go and when it&amp;rsquo;s appropriate to handle them in application code, almost like a try-catch in other languages. The content about templates hasn&amp;rsquo;t proven useful for me, but that&amp;rsquo;s likely because that&amp;rsquo;s not how I&amp;rsquo;m using Go.&lt;/p&gt;

&lt;p&gt;My overall recommendation is to look elsewhere for resources to learn Go, but if you are set on a book, I think this is a solid choice.&lt;/p&gt;

&lt;h3 id=&#34;6-cracking-the-coding-interview&#34;&gt;6. &lt;a href=&#34;https://www.amazon.com/gp/product/0984782850/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0984782850&amp;amp;linkCode=as2&amp;amp;tag=jaredririeblo-20&amp;amp;linkId=e859b809e508c63a05119e619a7893e5&#34;&gt;&lt;em&gt;Cracking the Coding Interview&lt;/em&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;The coding interview, whether you agree with it or not, is the de facto way to interview candidates. While not all skills that are required to be good at interviews overlap with skills necessary for the job, there’s enough overlap to keep this practice going.&lt;/p&gt;

&lt;p&gt;Take time to get good at coding interviews. This book is a great way to do just that. I can&amp;rsquo;t say that I&amp;rsquo;ve read this book cover to cover like the others, but I do practice 10-20 interview questions each quarter to keep my skills sharp. This has helped me develop my algorithm and data structure skills. With a Computer Engineering degree, I never took some advanced CS classes like algorithms, so I had a lot of catching up to do in this space.&lt;/p&gt;

&lt;p&gt;An honorable mention in this area of algorithms is &lt;a href=&#34;https://www.amazon.com/gp/product/1617292230/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1617292230&amp;amp;linkCode=as2&amp;amp;tag=jaredririeblo-20&amp;amp;linkId=9102ad3f806f2e991bfb8c49d39f184f&#34;&gt;&lt;em&gt;Grokking Algorithms&lt;/em&gt;&lt;/a&gt;. It&amp;rsquo;s an approachable book that explains data structures and algorithms with cartoon-like visualizations. As it&amp;rsquo;s written in such a way that non-programmers could also understand, I found it to be a quick read that taught these concepts in a different way than I originally learned them (Data Structures course with a textbook).&lt;/p&gt;

&lt;h3 id=&#34;5-the-complete-software-developers-career-guide&#34;&gt;5. &lt;a href=&#34;https://www.amazon.com/gp/product/0999081411/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0999081411&amp;amp;linkCode=as2&amp;amp;tag=jaredririeblo-20&amp;amp;linkId=72ce4355157a164d499ed8f8aca50486&#34;&gt;&lt;em&gt;The Complete Software Developer&amp;rsquo;s Career Guide&lt;/em&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;John Sonmez is an example of a software engineer turned entrepreneur who has made an impressive impact in his career and as a result done well financially. He focuses on teaching software developers how to have a successful career (landing the best-possible job, getting promoted, learning efficiently, picking a specialty, generating passive income, etc.). I found his advice very motivating and have applied several of his ideas with success.&lt;/p&gt;

&lt;p&gt;The book is quite lengthy, but it&amp;rsquo;s an easy, not highly technical read filled with great content that made me genuinely excited to keep reading.&lt;/p&gt;

&lt;p&gt;John Sonmez also wrote &lt;a href=&#34;https://www.amazon.com/gp/product/1617292397/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1617292397&amp;amp;linkCode=as2&amp;amp;tag=jaredririeblo-20&amp;amp;linkId=33231bfe0f798c662cf434f1d061db3c&#34;&gt;&lt;em&gt;Soft Skills: The Software Developer&amp;rsquo;s Life Manual&lt;/em&gt;&lt;/a&gt; which is worth checking out for more of this kind of content.&lt;/p&gt;

&lt;h3 id=&#34;4-clean-architecture&#34;&gt;4. &lt;a href=&#34;https://www.amazon.com/gp/product/0134494164/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0134494164&amp;amp;linkCode=as2&amp;amp;tag=jaredririeblo-20&amp;amp;linkId=f5aa6b16f1d067615e5f4add5291e7d9&#34;&gt;&lt;em&gt;Clean Architecture&lt;/em&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Clean Architecture&lt;/em&gt; is written by the same author as &lt;a href=&#34;https://www.amazon.com/gp/product/0132350882/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0132350882&amp;amp;linkCode=as2&amp;amp;tag=jaredririeblo-20&amp;amp;linkId=f0e51abe652f906c3ef0cf3b34b2470c&#34;&gt;&lt;em&gt;Clean Code&lt;/em&gt;&lt;/a&gt; (Robert Martin). As the differing names suggest, &lt;em&gt;Clean Architecture&lt;/em&gt; takes a broader view of software. That said, one of the key points the author makes is that the same patterns that apply to designing the components of a single system also apply to arranging the pieces which make up the architecture. That is, an idea like loose coupling is important in the structure of code &lt;em&gt;and&lt;/em&gt; the arrangement of the architecture.&lt;/p&gt;

&lt;p&gt;This book changed the way I thought about the code I write and the systems I help design. It helped me to structure my code such that the business logic is in the “inner” portion of the architecture, decoupled from the “outer” portion which handles transforming data to/from external sources. A concrete example of this is that the core logic of your service should not need to change if you change the means of communicating with a service from HTTP to a command-line interface.&lt;/p&gt;

&lt;p&gt;While the book can come off as opinionated, the opinions are well supported and thought provoking even if you disagree with them.&lt;/p&gt;

&lt;h3 id=&#34;3-building-microservices&#34;&gt;3. &lt;a href=&#34;https://www.amazon.com/gp/product/1491950358/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1491950358&amp;amp;linkCode=as2&amp;amp;tag=jaredririeblo-20&amp;amp;linkId=ff6627ecc170adf678c48add7232c76a&#34;&gt;&lt;em&gt;Building Microservices&lt;/em&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Building Microservices&lt;/em&gt; is the book that helped me make sense of the wonderful and horrific world of microservices. It was immediately applicable to the projects I was working on at work, so I feel like I came away with a deep understanding of its concepts. I would learn about a concept like circuit breaking one day and implement it the next, which made for an enriching learning experience.&lt;/p&gt;

&lt;p&gt;If an engineering team was considering adopting microservices, this book would help them understand the work they were signing up for to support such a system. As it gives such a holistic view of microservices, it&amp;rsquo;s also a great read for someone who works in such an architecture without understanding all the concepts and complexity. Here are some of the topics covered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Service discovery and DNS&lt;/li&gt;
&lt;li&gt;Monitoring&lt;/li&gt;
&lt;li&gt;Continuous integration&lt;/li&gt;
&lt;li&gt;Splitting monolithic systems&lt;/li&gt;
&lt;li&gt;Building resilient systems with partial degradation of functionality&lt;/li&gt;
&lt;li&gt;Asynchronous event-based collaboration&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Engineers at the company I work for (Qualtrics) can optionally read and discuss a &amp;ldquo;book of the quarter.&amp;rdquo; This book was selected one quarter as we&amp;rsquo;re right in the middle of splitting apart the monolithic PHP system that bootstrapped our company to where it is today. I think many other companies are in a similar spot and will find value in this book.&lt;/p&gt;

&lt;h3 id=&#34;2-nosql-distilled&#34;&gt;2. &lt;a href=&#34;https://www.amazon.com/gp/product/0321826620/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0321826620&amp;amp;linkCode=as2&amp;amp;tag=jaredririeblo-20&amp;amp;linkId=ad0c449b8cb5df43051f62f0de3e12e4&#34;&gt;&lt;em&gt;NoSQL Distilled&lt;/em&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;If you work with NoSQL databases or are considering doing so, I consider this book a must-read. It&amp;rsquo;s quite compact (just over 150 pages) yet efficiently teaches critical database concepts necessary to understand NoSQL. The material of this book helped me operate a NoSQL database called Couchbase and understand the implications of its failure scenarios.&lt;/p&gt;

&lt;p&gt;I actually read this book twice, first just as I started my career and then again two years later once I had a better understanding of databases. To be honest, I didn&amp;rsquo;t understand it very well the first time as &lt;em&gt;everything&lt;/em&gt; was new. Reading technical books multiple times can be extremely useful as it often takes additional experience to grasp difficult concepts.&lt;/p&gt;

&lt;p&gt;After explaining the main types of NoSQL databases (key-value, document, column-family, and graph), &lt;em&gt;NoSQL Distilled&lt;/em&gt; dives into sharding, replication, and consistency. These are critically-important chapters as they give you the vocabulary you need to understand databases in general. I noticed that my understanding of research papers on the topic of databases increased dramatically after reading this book simply because I could speak a bit of their language. This book also prepares you to decide on and then defend your choice of the best database for your use case.&lt;/p&gt;

&lt;h3 id=&#34;1-designing-data-intensive-applications&#34;&gt;1. &lt;a href=&#34;https://www.amazon.com/gp/product/1449373321/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1449373321&amp;amp;linkCode=as2&amp;amp;tag=jaredririeblo-20&amp;amp;linkId=6ae4fe247a516730f1e0677905f65987&#34;&gt;&lt;em&gt;Designing Data-Intensive Applications&lt;/em&gt;&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;This book is &lt;em&gt;phenomenal&lt;/em&gt; and can stand confidently in the number one position in this list! I strongly believe that all software engineers should make their way through this book! It&amp;rsquo;s on the lengthier side (624 pages) with sometimes dense and advanced content, but it&amp;rsquo;s well written and incredibly relevant to the data-intensive systems being built today.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re an experienced developer, you may think the book is too introductory from the first two chapters. Keep reading and you&amp;rsquo;ll find rigorous explanations of concepts within distributed and database systems that will give you depth in these areas. This book could be explained a combination of Building Microservices and NoSQL Distilled, supplemented with a whole lot more goodness. Glancing through the table of contents reminded me of some of the most helpful content:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data models and query languages&lt;/li&gt;
&lt;li&gt;Encoding (Protocol Buffers, Avro, etc.)&lt;/li&gt;
&lt;li&gt;Dataflow through databases&lt;/li&gt;
&lt;li&gt;Replication and all its flaws (much more detailed coverage than in NoSQL Distilled)&lt;/li&gt;
&lt;li&gt;Levels of isolation within various databases&lt;/li&gt;
&lt;li&gt;Partial failure in distributed systems&lt;/li&gt;
&lt;li&gt;Unix single responsibility principle&lt;/li&gt;
&lt;li&gt;Unreliable clocks&lt;/li&gt;
&lt;li&gt;Consistency and consensus&lt;/li&gt;
&lt;li&gt;Batch and stream processing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Check out some of Martin Kleppmann&amp;rsquo;s blog posts for a sample of the awesome content contained in this book:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.confluent.io/blog/apache-kafka-samza-and-the-unix-philosophy-of-distributed-data/&#34;&gt;Apache Kafka, Samza, and the Unix Philosophy of Distributed Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://martin.kleppmann.com/2015/01/29/stream-processing-event-sourcing-reactive-cep.html&#34;&gt;Stream processing, Event sourcing, Reactive, CEP… and making sense of it all&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;current-reading-list&#34;&gt;Current reading list&lt;/h2&gt;

&lt;p&gt;I keep an updated and prioritized list of books I would like to read. Here are some of the software-focused books on that list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Site Reliability Engineering: How Google Runs Production Systems&lt;/em&gt; (&lt;a href=&#34;https://www.amazon.com/gp/product/149192912X/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=149192912X&amp;amp;linkCode=as2&amp;amp;tag=jaredririeblo-20&amp;amp;linkId=d45d3fa7da30b4fdd9fbfe97167e36d7&#34;&gt;Print&lt;/a&gt;, &lt;a href=&#34;https://landing.google.com/sre/book.html&#34;&gt;Free Online Version&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/gp/product/0132350882/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0132350882&amp;amp;linkCode=as2&amp;amp;tag=jaredririeblo-20&amp;amp;linkId=f0e51abe652f906c3ef0cf3b34b2470c&#34;&gt;&lt;em&gt;Clean Code&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/gp/product/0596007124/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0596007124&amp;amp;linkCode=as2&amp;amp;tag=jaredririeblo-20&amp;amp;linkId=eeeea2f58df08367b4c118560bcef9a9&#34;&gt;&lt;em&gt;Head First Design Patterns&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/gp/product/1934356557/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1934356557&amp;amp;linkCode=as2&amp;amp;tag=jaredririeblo-20&amp;amp;linkId=ef99a9542973771e25a47d54cdabfdcd&#34;&gt;&lt;em&gt;SQL Antipatterns: Avoiding the Pitfalls of Database Programming&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/gp/product/1593275676/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1593275676&amp;amp;linkCode=as2&amp;amp;tag=jaredririeblo-20&amp;amp;linkId=991e8326ef2e46410ea1de1542ec8e5b&#34;&gt;&lt;em&gt;How Linux Works&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/gp/product/0201835959/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0201835959&amp;amp;linkCode=as2&amp;amp;tag=jaredririeblo-20&amp;amp;linkId=c19272cbb504e2d3f7b8e709be44c85c&#34;&gt;&lt;em&gt;Mythical Man Month&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/gp/product/300055808X/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=300055808X&amp;amp;linkCode=as2&amp;amp;tag=jaredririeblo-20&amp;amp;linkId=21499eb84dde797a205a9640d6a83d8f&#34;&gt;&lt;em&gt;Writing an Interpreter in Go&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Breaking Down Abstractions: Database Indexes</title>
          <link>https://backendology.com/2018/07/23/database-indexes/</link>
          <pubDate>Mon, 23 Jul 2018 00:00:00 UTC</pubDate>
          <author>Jared Ririe</author>
          <guid>https://backendology.com/2018/07/23/database-indexes/</guid>
          <description>

&lt;p&gt;In the introduction to this blog, I mentioned that I love breaking down abstractions to understand what makes them tick. This blog post is the first of many that will break down a fascinating abstraction.&lt;/p&gt;

&lt;h2 id=&#34;abstraction&#34;&gt;Abstraction&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Database indexes provide the abstraction of performant queries with the cost of some overhead during writes and additional storage space. As most workflows are read-heavy, the overhead of indexes is almost always worthwhile.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Indexes are incredibly powerful. The difference between a query that can utilize one or more indexes and a query without indexes can be breathtaking on datasets larger than a few hundred objects. In fact, the difference can be that the query with indexes finishes in milliseconds while the index-less query causes the database to fall over!&lt;/p&gt;

&lt;p&gt;I mentored an intern through a project with a database component last summer. Once the database grew to a substantial size, he remarked that his queries were taking seconds to complete, which was much longer than on his test dataset of a few items. I questioned whether indexes were in place and had him tack on &lt;code&gt;EXPLAIN&lt;/code&gt; to the start of his query (most databases, SQL or NoSQL, have some notion of &lt;code&gt;EXPLAIN&lt;/code&gt; which details the steps in executing the given query). While he did have some indexes, it was evident from the results of the &lt;code&gt;EXPLAIN&lt;/code&gt; that none of them were being used; rather the entire database was being scanned (known as a &lt;a href=&#34;https://en.wikipedia.org/wiki/Full_table_scan&#34;&gt;full table scan&lt;/a&gt;). We identified and added the missing index. The query wasn&amp;rsquo;t just twice as fast, it was two orders of magnitude faster, so about 10 milliseconds. I think his reaction may resonate with some of you: &amp;ldquo;Clearly I need to learn more about indexes.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Why do the right indexes lead to potentially massive performance increases? Conversely, why can the wrong index cause slow queries or even the database to fail? Why are indexes so important? Let&amp;rsquo;s break down this abstraction.&lt;/p&gt;

&lt;h2 id=&#34;breaking-it-down&#34;&gt;Breaking it down&lt;/h2&gt;

&lt;p&gt;To understand how database indexes work under the hood, let&amp;rsquo;s define a simple table which lists several people, their ages, and associated IDs:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;id&lt;/th&gt;
&lt;th&gt;name&lt;/th&gt;
&lt;th&gt;age&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Arvilla Hawks&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Maryellen Gourd&lt;/td&gt;
&lt;td&gt;18&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;Corliss Henline&lt;/td&gt;
&lt;td&gt;38&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;Lidia Haught&lt;/td&gt;
&lt;td&gt;17&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;Leo Thurlow&lt;/td&gt;
&lt;td&gt;84&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;Raymundo Vavra&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;Lyn Stucky&lt;/td&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;28&lt;/td&gt;
&lt;td&gt;Lura Apodaca&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;Brook Milum&lt;/td&gt;
&lt;td&gt;81&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Given an ID, we&amp;rsquo;d like to find out the name and age. Here&amp;rsquo;s a SQL query to discover that Leo Thurlow (age 84) is stored at ID 9:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;SELECT&lt;/span&gt; name, age &lt;span style=&#34;color:#66d9ef&#34;&gt;FROM&lt;/span&gt; people &lt;span style=&#34;color:#66d9ef&#34;&gt;WHERE&lt;/span&gt; id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;How does this query find the right answer? Well, without indexes, it merely scans the rows of the table until it happens upon ID 9. This ID was just a few entries from the start, so that doesn&amp;rsquo;t sound too bad. Consider, however, that this table could be thousands, millions, or billions of rows long. What if ID 9 was the &lt;em&gt;last&lt;/em&gt; row? We&amp;rsquo;d have to scan through a lot of rows! This process of scanning each row has a time complexity of O(N). Not great.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also worth noting that if the &lt;code&gt;id&lt;/code&gt; column was not unique, it would become necessary to scan all entries to find all the ones with the given ID. When N is large, scanning N items every time we need to respond to a query is going to take a long time. It&amp;rsquo;s possible that a long-running query combined with lots of other concurrent queries could just cause a database to fail (it could run out of memory, go into swap, become unable to respond to healthchecks, and be removed from the cluster).&lt;/p&gt;

&lt;p&gt;What we need is some way to store the IDs in a data structure more suited to this kind of searching. Enter: the index!&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Indexes are used to quickly locate data without having to search every row in a database table every time a database table is accessed. Indexes can be created using one or more columns of a database table, providing the basis for both rapid random lookups and efficient access of ordered records.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are many &lt;a href=&#34;https://en.wikipedia.org/wiki/Comparison_of_relational_database_management_systems#Indexes&#34;&gt;different types of database indexes&lt;/a&gt;, including B-tree, R-tree, Hash, Bitmap, and Spacial. Rather than trying to cover all of these index types, let&amp;rsquo;s deep dive on the ubiquitous B-tree.&lt;/p&gt;

&lt;h3 id=&#34;binary-search-tree-vs-b-tree-vs-b-tree&#34;&gt;Binary Search Tree vs. B-Tree vs. B+ Tree&lt;/h3&gt;

&lt;p&gt;Many software engineers are understandably confused about the differences between these three very similar sounding data structures: binary search tree, B-tree, and B+ tree. While they are all tree data structures, they are &lt;em&gt;not&lt;/em&gt; synonymous. A B-tree is not a &amp;ldquo;binary&amp;rdquo; tree (no matter how convenient that would be)! In fact: &amp;ldquo;What, if anything, the B stands for has never been established.&amp;rdquo;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h4 id=&#34;binary-search-tree&#34;&gt;Binary Search Tree&lt;/h4&gt;

&lt;p&gt;Binary search trees are binary trees that keep their keys in sorted order by enforcing the requirement that all left children of a node have values less than the node&amp;rsquo;s and all right children have values greater than the node&amp;rsquo;s.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/binary-search-tree.png&#34; width=&#34;100%&#34; alt=&#34;Binary Search Tree&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;b-tree&#34;&gt;B-tree&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;B-tree is a self-balancing tree data structure that keeps data sorted and allows searches, sequential access, insertions, and deletions in logarithmic time. The B-tree is a generalization of a binary search tree in that a node can have more than two children.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/balanced-nary-tree.png&#34; width=&#34;100%&#34; alt=&#34;B-Tree&#34; /&gt;&lt;/p&gt;

&lt;p&gt;B-trees have these properties:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Can have more than two children&lt;/li&gt;
&lt;li&gt;Self-balancing

&lt;ul&gt;
&lt;li&gt;Internal (non-leaf) nodes may be joined or split in order to maintain balance&lt;/li&gt;
&lt;li&gt;All leaf nodes must be at the same depth&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;The number of children for a particular node is equal to the number of keys in it plus one&lt;/li&gt;
&lt;li&gt;The minimum and maximum number of child nodes are typically fixed (a &lt;strong&gt;2-3 B-tree&lt;/strong&gt; allows each internal node to have 2 or 3 child nodes)&lt;/li&gt;
&lt;li&gt;Minimizes wasted storage space by ensuring the interior nodes are at least half full&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our simple B-tree, we store only a few keys in each node and each node only has a small number of children. A practical B-tree would have far more keys and children&amp;ndash;the exact number is related to the size of a full disk block such that each read will get as much data as possible.&lt;/p&gt;

&lt;p&gt;To use a B-tree as a database index, we must either store the entire table rows or hold pointers to the rows. Let&amp;rsquo;s take the pointer approach:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/b-tree.png&#34; width=&#34;100%&#34; alt=&#34;B-Tree as Database Index&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Note that this B-tree has the properties outlined above:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;All leaf nodes are at the same depth&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;[8  28]&lt;/code&gt; node has two keys and therefore three children&lt;/li&gt;
&lt;li&gt;Values less than 8 are in the left subtree, values between 8 and 28 and in the middle subtree, and values greater than 28 are in the right subtree&lt;/li&gt;
&lt;li&gt;Wasted space is minimized and the tree is balanced&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s return to the people table we started with and rerun the query now that we have an index structure in place. When evaluating the WHERE clause (&lt;code&gt;WHERE id = 9&lt;/code&gt;), the query optimizer now sees there is an index on the &lt;code&gt;id&lt;/code&gt; column. It follows the B-tree data structure until it finds ID 9 and follows the pointer to the associated table row.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Is 9 equal to 8? No&lt;/li&gt;
&lt;li&gt;Is 9 less than or equal to 8? No&lt;/li&gt;
&lt;li&gt;Is 9 between 8 and 28 (inclusive)? Yes!&lt;/li&gt;
&lt;li&gt;Is 9 equal to 9? Yes!&lt;/li&gt;
&lt;li&gt;Which table row does 9 point to? &lt;code&gt;9 | Leo Thurlow | 84&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The time complexity for this search drops from O(N) to O(log(N))!&lt;/p&gt;

&lt;h4 id=&#34;b-tree-1&#34;&gt;B+ tree&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;A B+ tree is an N-ary tree with a variable but often large number of children per node. &amp;hellip; A B+ tree can be viewed as a B-tree in which each node contains only keys (not key–value pairs), and to which an additional level is added at the bottom with linked leaves.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/b+-tree.png&#34; width=&#34;100%&#34; alt=&#34;B+ Tree as Database Index&#34; /&gt;&lt;/p&gt;

&lt;p&gt;B+ trees have these additional properties relative to a B-tree:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Leaf nodes are linked together&lt;/li&gt;
&lt;li&gt;All keys (and pointers to table rows) are stored in the leaves&lt;/li&gt;
&lt;li&gt;Copies of the keys are stored in the internal (non-leaf) nodes&lt;/li&gt;
&lt;li&gt;Typically have a large number of children per node&lt;/li&gt;
&lt;li&gt;Each node &lt;em&gt;may&lt;/em&gt; store a pointer to the next node for faster sequential access&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Comparing the example B-tree and B+ tree reveals that the same data is stored in each, but the additional properties of the B+ tree force the keys down to the leaf nodes. The linked list this forms makes range queries more efficient.&lt;/p&gt;

&lt;h4 id=&#34;progression&#34;&gt;Progression&lt;/h4&gt;

&lt;p&gt;Given those definitions, it becomes clear that each of these tree data structures builds on the previous one in a progression towards a structure fit for a database index. The added complexity with each step is a trade-off for improved performance in particular use cases. Some databases use a combination of B-trees and B+ trees depending on the type of index and nature of queries.&lt;/p&gt;

&lt;p&gt;Here is one way of looking at the progression from binary tree to B+ tree:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Start with a simple binary tree. Add self-balancing and enforce the properties of a binary search tree. Result: &lt;strong&gt;balanced binary search tree&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Allow this balanced binary search tree to have more than two children and enforce other properties of a B-tree. Result: &lt;strong&gt;B-tree&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Add pointers from the stored keys to rows in the database table. Result: &lt;strong&gt;B-tree used as a database index&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Push all keys into the leaf nodes and link the leaves. Result: &lt;strong&gt;B+ tree used as a database index&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;further-reading&#34;&gt;Further reading&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Database_index&#34;&gt;Wikipedia: Database Index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/B-tree&#34;&gt;Wikipedia: B-Tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/B%2B_tree&#34;&gt;Wikipedia: B+ Tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://goneill.co.nz/btree-demo.php&#34;&gt;JavaScript B-Tree Demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html&#34;&gt;B+ Tree Visualization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.conquex.com/?p=84&#34;&gt;Straightforward B+ Tree Implementation in JavaScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dev.mysql.com/doc/refman/5.5/en/index-btree-hash.html&#34;&gt;Comparison of B-Tree and Hash Indexes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Database_index&#34;&gt;https://en.wikipedia.org/wiki/Database_index&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/B-tree&#34;&gt;https://en.wikipedia.org/wiki/B-tree&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/B%2B_tree&#34;&gt;https://en.wikipedia.org/wiki/B%2B_tree&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
        </item>
      
    
      
        <item>
          <title>What This Blog is All About</title>
          <link>https://backendology.com/2018/07/14/what-this-blog-is-all-about/</link>
          <pubDate>Sat, 14 Jul 2018 00:00:00 UTC</pubDate>
          <author>Jared Ririe</author>
          <guid>https://backendology.com/2018/07/14/what-this-blog-is-all-about/</guid>
          <description>

&lt;h2 id=&#34;backendology&#34;&gt;&amp;ldquo;Backendology&amp;rdquo;?&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;There are only two hard things in Computer Science: cache invalidation and naming things (Phil Karlton).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Or, my favorite variant:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;There are only two hard things in Computer Science: cache invalidation, naming things, and off by one errors (Unknown)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Naming is hard. Backendology isn&amp;rsquo;t a real word. Like the programmer who decides to write a lengthy comment rather than coming up with a better name, I&amp;rsquo;ll try to explain what I intended when I named this blog Backendology. The name draws obvious reference to the term &amp;ldquo;backend” as in backend or server-side web development. The suffix &amp;ldquo;-logy&amp;rdquo; is a branch of learning, or study of a particular subject. Put together, this blog is a detailed study of the concepts and technologies related to backend web development.&lt;/p&gt;

&lt;h2 id=&#34;topics-i-plan-to-cover&#34;&gt;Topics I plan to cover&lt;/h2&gt;

&lt;p&gt;While this list does not aim to be exhaustive, it should give a good sense for topics I will cover in this blog. I’ll also briefly elaborate on why each topic deserves attention.&lt;/p&gt;

&lt;h3 id=&#34;distributed-systems&#34;&gt;Distributed systems&lt;/h3&gt;

&lt;p&gt;Many backend systems are an entanglement of services which together can be considered a distributed system. Rather than being monolithic in nature, these systems benefit from things like &lt;strong&gt;independent deployability&lt;/strong&gt;, &lt;strong&gt;focused development&lt;/strong&gt;, and &lt;strong&gt;loose coupling&lt;/strong&gt; yet suffer from the complexities of &lt;strong&gt;partial failure&lt;/strong&gt;, &lt;strong&gt;lack of concurrency guarantees&lt;/strong&gt;, and &lt;strong&gt;network boundaries&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This list of tradeoffs is clearly incomplete. Each complexity deserves its own blog post! Once network boundaries exist between components of a system, for example, problems such as discoverability must be dealt with. No longer can I make an easy function call; rather, I must build in some way for one service to find another service and then make a network call. This call could fail (should I retry?) or time out (how long should I wait?). Once I&amp;rsquo;ve figured out how to handle these failure scenarios, does &lt;em&gt;every&lt;/em&gt; service I write need to duplicate this logic or can I abstract it away through a form of middleware?&lt;/p&gt;

&lt;p&gt;Fascinating!&lt;/p&gt;

&lt;p&gt;Topics like caching, consistency, reverse proxying, API gateways, and service meshes are fair game.&lt;/p&gt;

&lt;h3 id=&#34;go&#34;&gt;Go&lt;/h3&gt;

&lt;p&gt;Go is a phenomenal language for backend development. I started writing Go in October 2015 and haven&amp;rsquo;t looked back. I&amp;rsquo;ll be writing several blog posts where I solve problems using Go or otherwise talk about it.&lt;/p&gt;

&lt;p&gt;Go is easy to learn, proven in production, and designed for the cloud. It&amp;rsquo;s deployed in production by high-traffic companies like Google, Dropbox, Uber, and Facebook in cases where stability and high performance are critical. Many open-source cloud computing tools are written in Go like Docker and Consul.&lt;/p&gt;

&lt;p&gt;I enjoy its strong focus on simplicity which translates to less ramp-up time for new developers. Another benefit is in maintainability of Go codebases, as it’s very readable and easy to understand existing code.&lt;/p&gt;

&lt;h3 id=&#34;nosql-and-general-database-concepts&#34;&gt;NoSQL and general database concepts&lt;/h3&gt;

&lt;p&gt;NoSQL is a movement that started in response to a need for increased scalability in large cloud companies like Google and Amazon. In my mind, NoSQL is less of a rebuttal of relational databases (i.e. &lt;em&gt;No, SQL!&lt;/em&gt;) and more of an alternative to SQL when it makes sense for the problem being solved (i.e. &lt;em&gt;Not Only SQL&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;I have worked with a large variety of NoSQL databases in my time at Qualtrics. Some have turned out extraordinarily well while others turned out quite the opposite! These experiences left me with this conclusion: &lt;strong&gt;database choice is often more important than programming language choice&lt;/strong&gt;. In order to make an informed decision, you need to be well-educated in general database concepts such as consistency and data modeling.&lt;/p&gt;

&lt;h3 id=&#34;software-and-non-software-books&#34;&gt;Software and non-software books&lt;/h3&gt;

&lt;p&gt;I have become an avid reader of technical books, as well as popular non-fiction books like &lt;a href=&#34;https://www.amazon.com/gp/product/1501111108/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1501111108&amp;amp;linkCode=as2&amp;amp;tag=jaredririeblo-20&amp;amp;linkId=c173ddc20b9a9fcd700e582440ca8479&#34;&gt;&lt;em&gt;Grit&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://www.amazon.com/gp/product/0345472322/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0345472322&amp;amp;linkCode=as2&amp;amp;tag=jaredririeblo-20&amp;amp;linkId=28b35ebce32bc00c963a529c58070d49&#34;&gt;&lt;em&gt;Mindset&lt;/em&gt;&lt;/a&gt;, and &lt;a href=&#34;https://www.amazon.com/gp/product/1455554790/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1455554790&amp;amp;linkCode=as2&amp;amp;tag=jaredririeblo-20&amp;amp;linkId=fff6e98d9dd5016e1aa4be73e0368874&#34;&gt;&lt;em&gt;Work Rules!&lt;/em&gt;&lt;/a&gt; ever since I graduated from college. I read five books each quarter, so 20 books/year. And by read, I really mean read &lt;em&gt;or&lt;/em&gt; listen; I&amp;rsquo;m an advocate of &lt;a href=&#34;https://www.amazon.com/gp/product/B00NB86OYE/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=B00NB86OYE&amp;amp;linkCode=as2&amp;amp;tag=jaredririeblo-20&amp;amp;linkId=627d0e41b121bbc9b5a33b365e23a2d7&#34;&gt;Audible&lt;/a&gt; and think it&amp;rsquo;s a solid investment.&lt;/p&gt;

&lt;p&gt;I’m planning on writing a post for each book I read with a summary of the content, further learning it inspired, and my overall recommendation. Here are some books on my reading list:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/gp/product/B001GSTOAM/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=B001GSTOAM&amp;amp;linkCode=as2&amp;amp;tag=jaredririeblo-20&amp;amp;linkId=2596e9caf8f63700450812054449c5d0&#34;&gt;&lt;em&gt;Clean Code&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/gp/product/1934356557/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=1934356557&amp;amp;linkCode=as2&amp;amp;tag=jaredririeblo-20&amp;amp;linkId=2bc3044e49259e2a806ec0d84738be0c&#34;&gt;&lt;em&gt;SQL Antipatterns&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/gp/product/0984782850/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0984782850&amp;amp;linkCode=as2&amp;amp;tag=jaredririeblo-20&amp;amp;linkId=06a672d4319440a648fcea507d939810&#34;&gt;&lt;em&gt;Cracking the Coding Interview&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/gp/product/0062663070/ref=as_li_tl?ie=UTF8&amp;amp;camp=1789&amp;amp;creative=9325&amp;amp;creativeASIN=0062663070&amp;amp;linkCode=as2&amp;amp;tag=jaredririeblo-20&amp;amp;linkId=f07f15aaa881d773ccfdbe396f4c7560&#34;&gt;&lt;em&gt;Multipliers: How the Best Leaders Make Everyone Smarter&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;research-papers&#34;&gt;Research papers&lt;/h3&gt;

&lt;p&gt;I was one week away from attending graduate school. I had accepted an offer and scholarship from the University of Wisconsin: Madison, enrolled in classes, and found an apartment. Then, in a last-minute decision, I walked away from it all a week before classes started. I&amp;rsquo;ll share the full story in a later blog post.&lt;/p&gt;

&lt;p&gt;While I still believe this was the correct choice given my circumstances, I regret not being able to delve into Computer Science research. Reading research papers has been more of a hit and miss for me than reading books. I hope this blog can serve as the necessary motivation to read more research papers and review them as blog entries. The research papers I have read, such as &lt;a href=&#34;https://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf&#34;&gt;Amazon’s well-known Dynamo paper&lt;/a&gt;, have been influential in improving my design skills and identifying weak areas in my understanding.&lt;/p&gt;

&lt;h3 id=&#34;up-and-coming-backend-technology&#34;&gt;Up-and-coming backend technology&lt;/h3&gt;

&lt;p&gt;The backend is notably more stable than the frontend. The database terminology or &lt;a href=&#34;http://thesecretlivesofdata.com/raft/&#34;&gt;distributed consensus algorithm&lt;/a&gt; you learned a few years ago will still be relevant for a long time. Meanwhile, if you picked up AngularJS around the same time, you know it was soon eclipsed by Angular and then React and now maybe Vue.js.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://backendology.com/public/images/service-mesh-istio-google-trends.png&#34; width=&#34;100%&#34; alt=&#34;Google Trends for Service Mesh and Istio&#34; /&gt;&lt;/p&gt;

&lt;p&gt;That said, the backend is still encapsulated in the ever-changing thing which is technology. “Service mesh” is one example of a backend idea that has only recently entered my vocabulary. It is a solution to dealing with the varied interactions between services in a network of microservices. &lt;a href=&#34;https://istio.io/docs/concepts/what-is-istio/overview/&#34;&gt;Istio&lt;/a&gt; is an example project I’ll cover in a later blog post. I plan to regularly write about new technologies of this nature.&lt;/p&gt;

&lt;h3 id=&#34;architecture-and-system-design&#34;&gt;Architecture and system design&lt;/h3&gt;

&lt;p&gt;One of the benefits of working at a smaller company is the opportunity to be involved in key architectural discussions even early in your career. Such has been the case for me at Qualtrics where I have been able to influence large chunks of the backend. I know, however, that I&amp;rsquo;m still in my infancy in terms of my ability to design elegant solutions to cross-cutting problems in a system. I am confident that as I improve my system design skills, I will be able to make a bigger impact on the technical direction of my software team.&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
