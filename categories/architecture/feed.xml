<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Architecture on Backendology</title>
    <link>https://backendology.com/categories/architecture/</link>
    <description>Recent content in Architecture on Backendology</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 08 Oct 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://backendology.com/categories/architecture/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Building Blocks of Distributed Systems</title>
      <link>https://backendology.com/2018/10/08/distributed-systems-building-blocks/</link>
      <pubDate>Mon, 08 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://backendology.com/2018/10/08/distributed-systems-building-blocks/</guid>
      <description>This blog post is based a chapter from The Architecture of Open Source Applications titled &amp;ldquo;Scalable Web Architecture and Distributed Systems.&amp;rdquo;
The Architecture of Open Source Applications Before getting into the details of the chapter, the book itself deserves some introduction. Its opening pages make the compelling point that architects in the traditional sense are exposed to and study thousands of real buildings, but software architects rarely make a similar investment, leading to repeated mistakes:</description>
    </item>
    
    <item>
      <title>Multiple Layers of Caching</title>
      <link>https://backendology.com/2018/08/27/multiple-layers-caching/</link>
      <pubDate>Mon, 27 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://backendology.com/2018/08/27/multiple-layers-caching/</guid>
      <description>Caching is one of my favorite topics in technology. I&amp;rsquo;ve been fortunate enough to approach this problem from both a hardware and software perspective. This blog post will cover some of the basics of caching, yet focus on the importance of having multiple layers of caching in a system. I think this is a key point worth emphasizing as I&amp;rsquo;ve seen it commonly misunderstood.
A caching anecdote One of the systems I built at Qualtrics could be described as the &amp;ldquo;back of the backend&amp;rdquo; as it was a critical storage system that many services relied on, yet had no service dependencies itself.</description>
    </item>
    
    <item>
      <title>Microservices: Are We Making a Huge Mistake?</title>
      <link>https://backendology.com/2018/08/21/microservices-huge-mistake/</link>
      <pubDate>Tue, 21 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://backendology.com/2018/08/21/microservices-huge-mistake/</guid>
      <description>There is a clear trend in the software industry moving away from large, monolithic systems to fine-grained services known as &amp;ldquo;microservices.&amp;rdquo; While compelling, microservices introduce their own set of challenges and fallacies. This post considers the benefits and drawbacks of a microservices architecture (MSA) and contemplates the question: are we making a huge mistake in adopting this kind of architecture?
Relationship to &amp;ldquo;distributed systems&amp;rdquo; First, let&amp;rsquo;s clear up some terminology that you may find confusing.</description>
    </item>
    
  </channel>
</rss>