<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Microservices on Backendology</title>
    <link>https://backendology.com/tags/microservices/</link>
    <description>Recent content in Microservices on Backendology</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 08 Oct 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://backendology.com/tags/microservices/feed.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Building Blocks of Distributed Systems</title>
      <link>https://backendology.com/2018/10/08/distributed-systems-building-blocks/</link>
      <pubDate>Mon, 08 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://backendology.com/2018/10/08/distributed-systems-building-blocks/</guid>
      <description>This blog post is based a chapter from The Architecture of Open Source Applications titled &amp;ldquo;Scalable Web Architecture and Distributed Systems.&amp;rdquo;
The Architecture of Open Source Applications Before getting into the details of the chapter, the book itself deserves some introduction. Its opening pages make the compelling point that architects in the traditional sense are exposed to and study thousands of real buildings, but software architects rarely make a similar investment, leading to repeated mistakes:</description>
    </item>
    
    <item>
      <title>Introduction to Distributed Systems Course</title>
      <link>https://backendology.com/2018/09/19/distributed-systems-course-introduction/</link>
      <pubDate>Wed, 19 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://backendology.com/2018/09/19/distributed-systems-course-introduction/</guid>
      <description>In my previous blog post, I created a detailed reading list of the distributed systems content I deemed most important and interesting. This post is the next step towards designing a comprehensive course in distributed systems: creating an introductory course.
Why not simply start at the top of the reading list and work down? I think any good introduction to this topic should provide a sampling of the various concepts and encourage experimentation and hands on learning.</description>
    </item>
    
    <item>
      <title>Designing a Comprehensive Course in Distributed Systems: Reading List</title>
      <link>https://backendology.com/2018/09/10/distributed-systems-course-reading-list/</link>
      <pubDate>Mon, 10 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://backendology.com/2018/09/10/distributed-systems-course-reading-list/</guid>
      <description>In a recent conversation at work, I learned about MIT&amp;rsquo;s distributed systems course. As the majority of the content is available online through the course website, I was just about ready to dive in, follow the course, and report on what I learned. But then I had this thought: I am not formally a student anymore, so I should take more ownership of my learning. I should design my own comprehensive course in distributed systems!</description>
    </item>
    
    <item>
      <title>Multiple Layers of Caching</title>
      <link>https://backendology.com/2018/08/27/multiple-layers-caching/</link>
      <pubDate>Mon, 27 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://backendology.com/2018/08/27/multiple-layers-caching/</guid>
      <description>Caching is one of my favorite topics in technology. I&amp;rsquo;ve been fortunate enough to approach this problem from both a hardware and software perspective. This blog post will cover some of the basics of caching, yet focus on the importance of having multiple layers of caching in a system. I think this is a key point worth emphasizing as I&amp;rsquo;ve seen it commonly misunderstood.
A caching anecdote One of the systems I built at Qualtrics could be described as the &amp;ldquo;back of the backend&amp;rdquo; as it was a critical storage system that many services relied on, yet had no service dependencies itself.</description>
    </item>
    
    <item>
      <title>Microservices: Are We Making a Huge Mistake?</title>
      <link>https://backendology.com/2018/08/21/microservices-huge-mistake/</link>
      <pubDate>Tue, 21 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://backendology.com/2018/08/21/microservices-huge-mistake/</guid>
      <description>There is a clear trend in the software industry moving away from large, monolithic systems to fine-grained services known as &amp;ldquo;microservices.&amp;rdquo; While compelling, microservices introduce their own set of challenges and fallacies. This post considers the benefits and drawbacks of a microservices architecture (MSA) and contemplates the question: are we making a huge mistake in adopting this kind of architecture?
Relationship to &amp;ldquo;distributed systems&amp;rdquo; First, let&amp;rsquo;s clear up some terminology that you may find confusing.</description>
    </item>
    
    <item>
      <title>Top 10 Books for New Software Engineers</title>
      <link>https://backendology.com/2018/07/30/top-software-books/</link>
      <pubDate>Mon, 30 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://backendology.com/2018/07/30/top-software-books/</guid>
      <description>I&amp;rsquo;m excited to share my top ten list of books new Software Engineers should invest in reading! These books have proved foundational in helping me transition from student to developer and deepen my skills.
First, a disclaimer: there are some great books missing from this list because I haven&amp;rsquo;t read them yet. I want this list to be as authentic as possible and therefore I will not recommend a book until I&amp;rsquo;ve read it cover to cover.</description>
    </item>
    
    <item>
      <title>What This Blog is All About</title>
      <link>https://backendology.com/2018/07/14/what-this-blog-is-all-about/</link>
      <pubDate>Sat, 14 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://backendology.com/2018/07/14/what-this-blog-is-all-about/</guid>
      <description>&amp;ldquo;Backendology&amp;rdquo;?  There are only two hard things in Computer Science: cache invalidation and naming things (Phil Karlton).
 Or, my favorite variant:
 There are only two hard things in Computer Science: cache invalidation, naming things, and off by one errors (Unknown)
 Naming is hard. Backendology isn&amp;rsquo;t a real word. Like the programmer who decides to write a lengthy comment rather than coming up with a better name, I&amp;rsquo;ll try to explain what I intended when I named this blog Backendology.</description>
    </item>
    
  </channel>
</rss>